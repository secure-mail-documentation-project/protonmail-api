openapi: 3.0.3
info:
  version: '2021-02-09'
  title: ProtonMail API
servers:
  - url: 'https://mail.protonmail.com/api/'
    description: Protonmail API Endpoint
  - url: 'https://api.protonmail.ch/'
    description: Protonmail API Endpoint
paths:
  /addresses:
    get:
      tags:
        - Addresses|Setup Address
      summary: Get Addresses
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
        - name: Page
          in: query
          description: the page index
          required: false
          schema:
            type: integer
            example: 0
            default: 0
        - name: PageSize
          in: query
          description: 'the page size, maximum 150'
          required: false
          schema:
            type: integer
            example: 150
            default: 150
      responses:
        '200':
          headers:
            Access:
              schema:
                type: string
                example: application/vnd.protonmail.api+json;apiversion=0
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Addresses": [
                        {
                          "ID": "qmhrlFY24BhSHiFplF0B7G_cMVLi1sokaWIhfNaee6dRtdIZPYnqgI4-MpAb8h3JhOOykKv8ZsuTH8X_SrUZSg==",
                          "DomainID": "l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA==",
                          "Email": "jason@protonmail.dev",
                          "Send": 1,
                          "Receive": 1,
                          "Status": 1,
                          "Type": 1,
                          "Order": 1,
                          "DisplayName": "D L'u, P.D. 定超",
                          "Signature": "hi there",
                          "HasKeys": 1,
                          "Keys": [
                            {
                              "ID": "IlnTbqicN-2HfUGIn-ki8bqZfLqNj5ErUB0z24Qx5g-4NvrrIc6GLvEpj2EPfwGDv28aKYVRRrSgEFhR_zhlkA==",
                              "Version": 3,
                              "Flags": 3,
                              "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----*-----END PGP PRIVATE KEY BLOCK-----",
                              "Fingerprint": "c93f767df53b0ca8395cfde90483475164ec6353",
                              "Activation": null,
                              "Primary": 1
                            }
                          ]
                        },
                        {
                          "ID": "_pm5NXefHCdfqXuHiQ_zcOsfC4rGaCwV4lxuJt5qCmZBh4RiQ0k5iA8wLLaphTWHWAETz-WDqjLDRXNWftciXw==",
                          "DomainID": "l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA==",
                          "Email": "hi@protonmail.dev",
                          "Send": 1,
                          "Receive": 0,
                          "Status": 0,
                          "Type": 2,
                          "Order": 2,
                          "DisplayName": "hi",
                          "Signature": "hi there",
                          "HasKeys": 0,
                          "Keys": []
                        }
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Addresses
      summary: Create new address
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Local": "me",
                    "Domain": "funoccupied.com",
                    "DisplayName": "hi",
                    "Signature": "signature"
                  }
          <unknown>:
            schema:
              properties:
                Local:
                  type: string
                  description: local part
                  example: user
                Domain:
                  type: string
                  description: either custom domain or a protonmail domain
                  example: funoccupied.com
                DisplayName:
                  type: string
                  example: hi
                  description: optional
                Signature:
                  type: string
                  example: signature
                  description: optional
        required: true
      responses:
        '200':
          headers:
            Access:
              schema:
                type: string
                example: application/vnd.protonmail.api+json;apiversion=0
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Address": {
                        "ID": "vuGSa1zsx0kV0jsfhX_xKSDQ0dvcLdMduA_c2c9fhaC1ZYCZKe8gony7nIWbnqaj8gebXLCQre1H1ZTKkhhFxA==",
                        "DomainID": "X_bSECsnvCSHHR44lXWMDOYDiZpbTUzqnQFyf_pqDq-JjXxXJCv_jQmSOLhD3e3A==",
                        "Email": "me@funoccupied.com",
                        "Send": 1,
                        "Status": 1,
                        "Type": 1,
                        "Receive": 1,
                        "Order": 5,
                        "DisplayName": "hi",
                        "Signature": "signature",
                        "HasKeys": 1,
                        "MemberID": "gony7nIWbnqaj8gebXLCQre1H1ZTKkhhFxA==",
                        "MemberName": "Fred"
                      },
                      "Code": 1000
                    }
            <unknown>:
              schema:
                type: object
                properties:
                  Status:
                    type: integer
                    description: '0 is disabled, 1 is enabled, can be set by user'
                  Type:
                    type: integer
                    description: '1 is original PM, 2 is PM alias, 3 is custom domain address'
                  Receive:
                    type: integer
                    description: '1 is active address (Status=1 and has key), 0 is inactive (cannot send or receive)'
                  DisplayName:
                    type: string
                    description: 'optional, default empty'
                  Signature:
                    type: string
                    description: 'optional, default empty'
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
        '30004':
          headers:
            Access:
              schema:
                type: string
                example: application/vnd.protonmail.api+json;apiversion=0
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 30004,
                      "Error": "Domain not found",
                      "Details": {}
                    }
            <unknown>:
              schema:
                type: object
                properties:
                  Status:
                    type: integer
                    description: '0 is disabled, 1 is enabled, can be set by user'
                  Type:
                    type: integer
                    description: '1 is original PM, 2 is PM alias, 3 is custom domain address'
                  Receive:
                    type: integer
                    description: '1 is active address (Status=1 and has key), 0 is inactive (cannot send or receive)'
                  DisplayName:
                    type: string
                    description: 'optional, default empty'
                  Signature:
                    type: string
                    description: 'optional, default empty'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /addresses/order:
    put:
      tags:
        - Addresses
      summary: Reorder user's addresses
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "AddressIDs" : [     // Will amend the order of addresses with the order of the corresponding AddressIDs
                          "-Bpgivr5H2qGDRiUQ4-7gm5YLf215MEgZCdzOtLW5psxgB8oNc8OnoFRykab4Z23EGEW1ka3GtQPF9xwx9-VUA==",
                          "pIJGEYyNFsPEb61otAc47_X8eoSeAfMSokny6dmg3jg2JrcdohiRuWSN2i1rgnkEnZmolVx4Np96IcwxJh1WNw==",
                          "l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA=="
                  ]
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /addresses/setup:
    post:
      tags:
        - Addresses|Setup Address
      summary: Setup new non-subuser address
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Domain": "protonmail.com",
                    "DisplayName": "hi",
                    "Signature": "signature"
                  }
          <unknown>:
            schema:
              properties:
                Domain:
                  type: string
                  description: protonmail domain
                  example: protonmail.com
                DisplayName:
                  type: string
                  example: hi
                  description: optional
                Signature:
                  type: string
                  example: signature
                  description: optional
        required: true
      responses:
        '200':
          headers:
            Access:
              schema:
                type: string
                example: application/vnd.protonmail.api+json;apiversion=0
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Address": {
                        "ID": "vuGSa1zsx0kV0jsfhX_xKSDQ0dvcLdMduA_c2c9fhaC1ZYCZKe8gony7nIWbnqaj8gebXLCQre1H1ZTKkhhFxA==",
                        "DomainID": "X_bSECsnvCSHHR44lXWMDOYDiZpbTUzqnQFyf_pqDq-JjXxXJCv_jQmSOLhD3e3A==",
                        "Email": "me@protonmail.com",
                        "Send": 0,
                        "Status": 1,
                        "Type": 1,
                        "Receive": 0,
                        "Order": 1,
                        "DisplayName": "hi",
                        "Signature": "signature",
                        "HasKeys": 0,
                        "Keys": []
                      },
                      "Code": 1000
                    }
            <unknown>:
              schema:
                type: object
                properties:
                  Status:
                    type: integer
                    description: '0 is disabled, 1 is enabled, can be set by user'
                  Type:
                    type: integer
                    description: '1 is original PM, 2 is PM alias, 3 is custom domain address'
                  Receive:
                    type: integer
                    description: '1 is active address (Status=1 and has key), 0 is inactive (cannot send or receive)'
                  DisplayName:
                    type: string
                    description: 'optional, default empty'
                  Signature:
                    type: string
                    description: 'optional, default empty'
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  '/addresses/{address_id}':
    get:
      tags:
        - Addresses|Address
      summary: Get Address
      description: Get a single address.
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          headers:
            Access:
              schema:
                type: string
                example: application/vnd.protonmail.api+json;apiversion=0
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Address": {
                        "ID": "qmhrlFY24BhSHiFplF0B7G_cMVLi1sokaWIhfNaee6dRtdIZPYnqgI4-MpAb8h3JhOOykKv8ZsuTH8X_SrUZSg==",
                        "DomainID": "l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA==",
                        "Email": "jason@protonmail.dev",
                        "Send": 1,
                        "Receive": 1,
                        "Status": 1,
                        "Type": 1,
                        "Order": 1,
                        "DisplayName": "D L'u, P.D. 定超",
                        "Signature": "hi there",
                        "HasKeys": 1,
                        "Keys": [
                          {
                            "ID": "IlnTbqicN-2HfUGIn-ki8bqZfLqNj5ErUB0z24Qx5g-4NvrrIc6GLvEpj2EPfwGDv28aKYVRRrSgEFhR_zhlkA==",
                            "Version": 3,
                            "Flags": 3,
                            "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----*-----END PGP PRIVATE KEY BLOCK-----",
                            "Fingerprint": "c93f767df53b0ca8395cfde90483475164ec6353",
                            "Activation": null,
                            "Primary": 1
                          }
                        ]
                      }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    put:
      tags:
        - Addresses|Address
      summary: Update address
      description: Update display name and/or signature.
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              update display name and signature:
                value: |-
                  {
                    "DisplayName": "hi",
                    "Signature": "signature"
                  }
              use defaults:
                value: |-
                  {
                    "DisplayName": "",
                    "Signature": ""
                  }
          <unknown>:
            schema:
              properties:
                DisplayName:
                  type: string
                  example: hi
                  description: optional
                Signature:
                  type: string
                  example: signature
                  description: optional
        required: true
      responses:
        '200':
          headers:
            Access:
              schema:
                type: string
                example: application/vnd.protonmail.api+json;apiversion=0
          content:
            application/json:
              examples:
                update display name and signature:
                  value: |-
                    {
                      "Code": 1000
                    }
                use defaults:
                  value: |-
                    {
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Addresses|Address
      summary: Delete a Disabled Address
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: address_id
        in: path
        description: the encrypted id
        schema:
          type: string
          example: lKJlejjlk==
        required: true
  '/addresses/{address_id}/disable':
    put:
      tags:
        - Addresses|Address
      summary: Disable Address
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: address_id
        in: path
        description: the encrypted id
        schema:
          type: string
          example: lKJlejjlk==
        required: true
  '/addresses/{address_id}/enable':
    put:
      tags:
        - Addresses|Address
      summary: Enable Address
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: address_id
        in: path
        description: the encrypted id
        schema:
          type: string
          example: lKJlejjlk==
        required: true
  /admin/vpn/logicals:
    get:
      tags:
        - VPN Admin
      summary: Get array of VPN logical server information
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "LogicalServers": [
                        {
                          "ID": 1234,
                          "Name": "ES#1",
                          "Region": null,
                          "City": null,
                          "EntryCountry": "ES",
                          "ExitCountry": "ES",
                          "Domain": "es-05.protonvpn.com",
                          "DisplayTier": 2,
                          "Tier": 2,
                          "Visible": 1,
                          "Features": 0,
                          "Servers": [
                            {
                              "ID": 1063,
                              "ServicesDown": 8,
                              "Bytes": 30440,
                              "LoadUpdateTime": 1510953284,
                              "EntryIP": "95.215.61.163",
                              "ExitIP": "95.215.61.164",
                              "Domain": "es-04.protonvpn.com",
                              "MaxSpeed": 26214400,
                              "Load": 32,
                              "Enabled": 1
                            }
                          ],
                          "Load": 0,
                          "Location": {
                            "Lat": 39.4667,
                            "Long": -0.3667
                          }
                        }
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    put:
      tags:
        - VPN Admin
      summary: Update Logical Server
      parameters:
        - $ref: '#/components/parameters/header_x-pm-uid'
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Name": "ES#1",
                    "Region": null,
                    "City": null,
                    "Domain": "es-05.protonvpn.com",
                    "EntryCountry": "ES",
                    "ExitCountry": "ES",
                    "Location": {
                      "Lat": 39.4667,
                      "Long": -0.3667
                    },
                    "Tier": 1,
                    "DisplayTier": 2,
                    "ServerIDs": [
                      1063
                    ],
                    "Features": 0,
                    "Visible": 1
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "LogicalServer": {
                        "ID": 1234,
                        "Name": "ES#1",
                        "Region": null,
                        "City": null,
                        "EntryCountry": "ES",
                        "ExitCountry": "ES",
                        "Domain": "es-05.protonvpn.com",
                        "DisplayTier": 3,
                        "Tier": 2,
                        "Visible": 1,
                        "Features": 0,
                        "Servers": [
                          {
                            "ID": 1063,
                            "ServicesDown": 8,
                            "Bytes": 30440,
                            "LoadUpdateTime": 1510953284,
                            "EntryIP": "95.215.61.163",
                            "ExitIP": "95.215.61.164",
                            "Domain": "es-04.protonvpn.com",
                            "MaxSpeed": 26214400,
                            "Load": 32,
                            "Enabled": 1
                          }
                        ],
                        "Load": 0,
                        "Location": {
                          "Lat": 39.4667,
                          "Long": -0.3667
                        }
                      }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - VPN Admin
      summary: Create Logical Server
      parameters:
        - $ref: '#/components/parameters/header_x-pm-uid'
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Name": "ES#1",
                    "Domain": "es-05.protonvpn.com",
                    "Region": null,
                    "City": null,
                    "EntryCountry": "ES",
                    "ExitCountry": "ES",
                    "Location": {
                      "Lat": 39.4667,
                      "Long": -0.3667
                    },
                    "Tier": 1,
                    "DisplayTier": 2,
                    "ServerIDs": [
                      1063
                    ],
                    "Features": 0,
                    "Visible": 1
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "LogicalServer": {
                        "ID": 1234,
                        "Name": "ES#1",
                        "Region": null,
                        "City": null,
                        "EntryCountry": "ES",
                        "ExitCountry": "ES",
                        "Domain": "es-05.protonvpn.com",
                        "DisplayTier": 2,
                        "Tier": 1,
                        "Visible": 1,
                        "Features": 0,
                        "Servers": [
                          {
                            "ID": 1063,
                            "ServicesDown": 8,
                            "Bytes": 30440,
                            "LoadUpdateTime": 1510953284,
                            "EntryIP": "95.215.61.163",
                            "ExitIP": "95.215.61.164",
                            "Domain": "es-04.protonvpn.com",
                            "MaxSpeed": 26214400,
                            "Load": 32,
                            "Enabled": 1
                          }
                        ],
                        "Load": 0,
                        "Location": {
                          "Lat": 39.4667,
                          "Long": -0.3667
                        }
                      }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - VPN Admin
      summary: Delete Logical Server
      parameters:
        - $ref: '#/components/parameters/header_x-pm-uid'
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /admin/vpn/servers:
    get:
      tags:
        - VPN Admin
      summary: Get array of VPN server information
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Servers": [
                        {
                          "ID": 1063,
                          "ServicesDown": 8,
                          "Bytes": 30440,
                          "LoadUpdateTime": 1510953284,
                          "EntryIP": "95.215.61.163",
                          "ExitIP": "95.215.61.164",
                          "Domain": "es-04.protonvpn.com",
                          "MaxSpeed": 26214400,
                          "Load": 32,
                          "Enabled": 1
                        }
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    put:
      tags:
        - VPN Admin
      summary: Update Server
      parameters:
        - $ref: '#/components/parameters/header_x-pm-uid'
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "EntryIP": "95.215.61.163",
                    "ExitIP": "95.215.61.164",
                    "Domain": "es-04.protonvpn.com",
                    "Enabled": 1
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Server": {
                        "ID": 1063,
                        "ServicesDown": 8,
                        "Bytes": 30440,
                        "LoadUpdateTime": 1510953284,
                        "EntryIP": "95.215.61.163",
                        "ExitIP": "95.215.61.164",
                        "Domain": "es-04.protonvpn.com",
                        "MaxSpeed": 26214400,
                        "Load": 32,
                        "Enabled": 1
                      }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - VPN Admin
      summary: Create Server
      parameters:
        - $ref: '#/components/parameters/header_x-pm-uid'
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "EntryIP": "95.215.61.163",
                    "ExitIP": "95.215.61.164",
                    "Domain": "es-04.protonvpn.com",
                    "Enabled": 1
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Server": {
                        "ID": 1063,
                        "ServicesDown": 8,
                        "Bytes": 30440,
                        "LoadUpdateTime": 1510953284,
                        "EntryIP": "95.215.61.163",
                        "ExitIP": "95.215.61.164",
                        "Domain": "es-04.protonvpn.com",
                        "MaxSpeed": 26214400,
                        "Load": 32,
                        "Enabled": 1
                      }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - VPN Admin
      summary: Delete Server
      parameters:
        - $ref: '#/components/parameters/header_x-pm-uid'
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /attachments:
    post:
      tags:
        - Attachments
      summary: Upload an attachment to a draft message
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
            examples:
              example:
                value: |-
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="Filename"

                  test.txt
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="MessageID"

                  ASDkjhasdSAJhasdasdASD==
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="MIMEType"

                  text/plain
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="ContentID" // Empty string or missing is no ContentID

                  abcdef@domain.com
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="KeyPackets"; filename="temp1"
                  Content-Type: application/octet-stream

                  {binary asymmetric key packet}

                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="DataPacket"; filename="temp2"
                  Content-Type: application/octet-stream

                  {encrypted data packet}

                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="Signature"; filename="temp3"
                  Content-Type: application/octet-stream

                  {optional binary signature packet(s)}

                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Attachment": {
                            "ID":"I6hgx3Ol_sdfAs832J2==",
                            "Name":"test.txt",
                            "Size": 1503,
                            "MIMEType":"text\/plain",
                            "KeyPackets":"wcBMA6rw6TH9oRKuAQf\/Q3scaoBPjn710+EhfiIP0jF2udWfZ4Thv9TCiaolRMMhivqBpOoeFuyVi6\/LqpibLeVu3karg7zvFTFb+97eWF8ZP8cg8pPjyP4QRclZ4v1hfF1G6Tlw5L3TWt9j5WeMpinjJ3MY0df9WUzf9u+c7AoKNUsfuXHQ4o2ry94ccVYLfm13dw2gEkHxqMkwJ+SHR7vuKADl1EQUzkYjq7+pF3xje4Wwr0Xg+GAcOBQVUcQ3tkbvwZq3\/qxhavP5Pdlei\/8BGUreWQVicKFY5yW3nz+RgHkwqKNwdRnjr1mcFStv45oEicAcccb72FyXuHrhbAzoBmJT2ngQMxUS9+ZsTg==",
                            "Headers": { },
                            "Signature": "-----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----" // or null
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  '/attachments/{attachmentID}':
    get:
      tags:
        - Attachments
      summary: Get an attachment by ID
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
        - $ref: '#/components/parameters/header_Accept_any'
      responses:
        '200':
          headers:
            Content-Disposition:
              schema:
                type: string
                example: attachment; filename = "Issue 4.png"
            Content-Length:
              schema:
                type: string
                example: '1532'
            Content-Transfer-Encoding:
              schema:
                type: string
                example: binary
          content:
            image/png:
              examples:
                example:
                  value: '{binary_file_content_or_encrypted_data_packet}'
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Attachments
      summary: Delete an attachment from a draft message
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
        - $ref: '#/components/parameters/header_Accept_json'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - name: attachmentID
        in: path
        schema:
          type: string
          example: <encrypted attachment id>
        required: true
  '/attachments/{attachmentID}/signature':
    put:
      tags:
        - Attachments
      summary: Update an attachment's signature on a draft message
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Signature" : "-----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----" // or null
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: attachmentID
        in: path
        schema:
          type: string
          example: <encrypted attachment id>
        required: true
  /auth:
    post:
      tags:
        - Authentication
      summary: Authenticate
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |
                  {
                      "ClientID": "demoapp",
                      "ClientSecret": "demopass", //only required for admin panel
                      "Username": "user_name",
                      "ClientEphemeral" : "<base64_encoded_ephemeral>",
                      "ClientProof" : "<base64_encoded_proof>",
                      "SRPSession": "<hex_encoded_session_key>",
                      "TwoFactorCode": 123456, //either this, the U2F object, or nothing if 2FA is disabled
                      "U2F": {
                          "KeyHandle" : "<aKeyHandle>",
                          "ClientData": "1046-length string",
                          "SignatureData": "theSignatureData"
                      }
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |
                    {
                        "Code": 1000,
                        "AccessToken": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                        "ExpiresIn": 360000,
                        "TokenType": "Bearer",
                        "Scope": "full <other_scopes>", // Full access with decrypted AccessToken
                        "UID": "6f3c4f52cf499c2066e6c5669a293177c1f43755",
                        "RefreshToken": "aafe30367aa7dc09bf5c42d15a93e6c57270fe6f",
                        "UserStatus": 13,
                        "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                        "KeySalt": <base64_encodeed_salt>,
                        "EventID":"ACXDmTaBub14w==", // first client event ID, send with first request for events
                        "ServerProof": <base64_encoded_proof>,
                        "PasswordMode": 2
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    delete:
      tags:
        - Authentication
      summary: Revoke a token
      parameters:
        - $ref: '#/components/parameters/header_x-pm-uid'
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /auth/cookies:
    post:
      tags:
        - Authentication
      summary: 'Set secure cookies, web app only'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "ResponseType": "token",
                    "ClientID": "demoapp",
                    "GrantType": "refresh_token",
                    "RefreshToken": "eaad5a7059835aac32c0bf99c2e208a59b8c1a55",
                    "UID": "6f3c4f52cf499c2066e6c5669a293177c1f43755",
                    "RedirectURI": "http://protonmail.ch",
                    "State": "random_string"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "UID": "3f33a926677e5cf429db2dc7fee519a1"
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /auth/info:
    post:
      tags:
        - Authentication
      summary: Set up SRP authentication request
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "ClientID": "demoapp",
                    "ClientSecret": "demopass",
                    "Username": "user_name"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Modulus": "-----BEGIN PGP SIGNED MESSAGE-----*-----END SIGNATURE-----",
                        "ServerEphemeral": <base64_encoded_server_ephemeral>,
                        "Version": 4,
                        "Salt": <base64_encoded_salt>,
                        "SRPSession": <hex_encoded_session_key>,
                        "TwoFactor": 1, // deprecated
                        "2FA": {
                            "TOTP" : 1,
                            "U2F" : {
                                "Challenge": "a43lengthStringAndUnique",
                                "RegisteredKeys": [{
                                    "Version": "U2F_V2",
                                    "KeyHandle":<aKeyHandle>
                                }]
                            }
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /auth/modulus:
    get:
      tags:
        - Authentication
      summary: Get random SRP modulus
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Modulus": "-----BEGIN PGP SIGNED MESSAGE-----.*-----END PGP SIGNATURE-----",
                      "ModulusID": "Oq_JB_IkrOx5WlpxzlRPocN3_NhJ80V7DGav77eRtSDkOtLxW2jfI3nUpEqANGpboOyN-GuzEFXadlpxgVp7_g=="
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh an expired token
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "ResponseType": "token",
                    "ClientID": "demoapp",
                    "GrantType": "refresh_token",
                    "RefreshToken": "eaad5a7059835aac32c0bf99c2e208a59b8c1a55",
                    "UID": "6f3c4f52cf499c2066e6c5669a293177c1f43755",
                    "RedirectURI": "http://protonmail.ch",
                    "State": "random_string"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "AccessToken": "8a2575fad8788d253543957073d494c86f22f829", // Decrypted if reset scope or no keys set up
                        "ExpiresIn": 360000,
                        "TokenType": "Bearer",
                        "Scope": "reset", // Can only be used to reset mailbox password
                        "UID": "e5358d5c2352650c801fdf533fc5c61308b52430",
                        "UserStatus": null,
                        "RefreshToken": "b894b4c4f20003f12d486900d8b88c7d68e67235"
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /auth/sessions:
    get:
      tags:
        - Authentication
      summary: Get active sessions
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Sessions": [
                            {
                                "UID": "cc0a3ec21c3af3461c9c310bf3f568795fdf6dc5",
                                "ClientID": "Web",
                                "CreateTime": 1527262849,
                                "MemberID": "IhcUWoRxdY3S-6pfk2L1oSTeZx5kvpeqcxuii8h1ic1nYnSJa11LP8DABcgsRJCwXXDjxwPFSxEGJrlrvMWFpQ==",
                                "Revocable": 0
                            },
                            {
                                "UID": "1c48fc422e50d64f5a55fb218cd3dc49e661b49e",
                                "ClientID": "Web",
                                "CreateTime": 1527350133,
                                "MemberID": null,
                                "Revocable: 1
                            }
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Authentication
      summary: Revoke a
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /betas:
    get:
      tags:
        - Betas
      summary: Get all beta registrations
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Betas": [
                            {
                                "ClientID": "iOSVPN",
                                "Email" : "john@exampl.com", // may be null
                                "CreateTime": 1538416904,
                                "ModifyTime": 1538416904
                            }
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Betas
      summary: Delete all beta registrations
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  '/betas/{clientid}':
    get:
      tags:
        - Betas
      summary: Get a specific beta registration
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      responses:
        '200':
          $ref: '#/components/responses/BetaRegistrationOK'
      security:
        - pm_authentication: []
    put:
      tags:
        - Betas
      summary: Create or update beta registration
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Email": "john@example.com" // Only required for some betas
                  }
      responses:
        '200':
          $ref: '#/components/responses/BetaRegistrationOK'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Betas
      summary: Delete a specific beta registration
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: clientid
        in: path
        description: the client ID
        schema:
          type: string
          example: iOSVPN
        required: true
  /contacts:
    get:
      tags:
        - Contacts
      summary: Get a list of contacts minus their data for when user visits the contact page
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
        - name: Page
          in: query
          description: the page index
          required: false
          schema:
            type: integer
            example: 0
            default: 0
        - name: PageSize
          in: query
          description: 'the page size, maximum 1000'
          required: false
          schema:
            type: integer
            example: 1000
            default: 1000
        - name: LabelID
          in: query
          description: label to filter on
          required: false
          schema:
            type: string
            example: LKJLalkfejl==
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Contacts": [                               // Contacts are ordered by Name
                            {
                                "ID": "a29olIjFv0rnXxBhSMw==",      // Contact.ContactID
                                "Name": "ProtonMail Features",
                                "UID": "proton-legacy-4bcd0f7f-acb8-4d27-9793-91adfd90750f",
                                "Size": 0,
                                "CreateTime": 1503815366,
                                "ModifyTime": 1503815366,
                                "LabelIDs": [
                                    "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w=="
                                ]
                            },
                            {
                                "ID": "3N_6L-i2CMwWWSV6Pw==",
                                "Name": "zzBob",
                                "UID": "proton-legacy-690d179c-3a23-4666-9010-2164e6d82492",
                                "Size": 0,
                                "CreateTime": 1503815366,
                                "ModifyTime": 1503815366,
                                "LabelIDs": []
                            }
                        ],
                        "Total": 2 // Total number of contacts
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Contacts
      summary: Create new contacts
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Contacts": [
                          {
                              "Cards": [
                                  {
                                      "Type": 3, // encrypted and signed, optional
                                      "Data": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                                      "Signature": "-----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----"
                                  },
                                  {
                                      "Type": 2, // Signed, required, can only include VERSION, PRODID, FN, UID, EMAIL. FN and UID required, EMAILs optional, but must have vCard group
                                      "Data": "BEGIN:VCARD\r\nVERSION:4.0\r\nFN:ProtonMail Features\r\nUID:proton-legacy-139892c2-f691-4118-8c29-061196013e04\r\nitem1.EMAIL;TYPE=work;PREF=1:features@protonmail.black\r\nitem2.EMAIL;TYPE=home;PREF=2:features@protonmail.ch\r\nEND:VCARD\r\n",
                                      "Signature": "-----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----"
                                  },
                                  {
                                      "Type": 0, // Unsigned, can only include VERSION, PRODID, CATEGORIES
                                      "Data": "BEGIN:VCARD\r\nVERSION:4.0\r\nitem1.CATEGORIES:MyLabelName1,MyLabelName2\r\nEND:VCARD\r\n",
                                      "Signature": null
                                  }
                              ]
                          },
                          {
                              "Cards": [
                                  {
                                      "Type": 2, // Signed, required
                                      "Data": "BEGIN:VCARDr\nVERSION:4.0\r\nPRODID:-//ProtonMail//ProtonMail vCard 1.0.0//EN\r\nFN:ProtonMail Security\r\nUID:proton-legacy-139892c2-f692-4118-8c29-061196013e04\r\nitem1.EMAIL;PREF=1:security@protonmail.dev\r\nEND:VCARD\r\n",
                                      "Signature": "-----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----"
                                  }
                              ]
                          }
                      ],
                      "Overwrite": 1, // when UID conflict, 0 = error, 1 = overwrite
                      "Labels": 1 // add labels (CATEGORIES) if present, import will fail if label does not exist
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code" : 1001,
                        "Responses" : [
                            {
                                "Index": 0,
                                "Response" : {
                                    "Code": 1000,
                                    "Contact": {
                                        "ID": "a29olIjFv0rnXxBhSMw==",
                                        "Name": "ProtonMail Features",
                                        "UID": "proton-legacy-139892c2-f691-4118-8c29-061196013e04",
                                        "Size": 1434,
                                        "CreateTime": 1503815366,
                                        "ModifyTime": 1503815366,
                                        "ContactEmails": [
                                            {
                                                "ID": "aefew4323jFv0BhSMw==",   // ContactList.ContactID
                                                "Email": "features@protonmail.black",
                                                "Type": ["work"],
                                                "Defaults": 1,                 // ignore for now, future feature
                                                "Order": 1,
                                                "ContactID": "a29olIjFv0rnXxBhSMw==",
                                                "LabelIDs": [                   // Groups
                                                    "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w=="
                                                ]
                                            },
                                            {
                                                "ID": "dbdvrafejFv0BhSMw==",
                                                "Email": "features@protonmail.ch",
                                                "Type": ["home"],
                                                "Defaults": 1,
                                                "Order": 2,
                                                "ContactID": "a29olIjFv0rnXxBhSMw==",
                                                "LabelIDs": []
                                            }
                                        ],
                                        "LabelIDs": [                           // Labels on Contact, ignore, maybe future feature
                                            "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w=="
                                        ]
                                    }
                                }
                            },
                            {
                                "Index": 1,
                                "Response": {
                                    "Code": 1000,
                                    "Contact": {
                                        "ID": "jhuafesr2srgaefSMw==",
                                        "Name": "ProtonMail Security",
                                        "UID": "proton-legacy-4bcd0f7f-acb6-4d27-9793-91adfd90750f",
                                        "Size": 1234,
                                        "CreateTime": 1503815366,
                                        "ModifyTime": 1503815366,
                                        "ContactEmails": [
                                            {
                                                "ID": "aefew4323jFv0BhSMw==",   // ContactList.ContactID
                                                "Email": "security@protonmail.dev",
                                                "Type": [],
                                                "Defaults": 1,                 // ignore for now, future feature
                                                "Order": 1,
                                                "ContactID": "jhuafesr2srgaefSMw==",
                                                "LabelIDs": []                   // Groups
                                            }
                                        ],
                                        "LabelIDs": []
                                    }
                                }
                            }
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Contacts
      summary: Delete all contacts
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /contacts/delete:
    put:
      tags:
        - Contacts
      summary: Delete array of contacts
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "IDs": [
                          "gD7tqQFumWuP0P3Jxu_IYoNLsh6CbixlCAnuXbbwnTTUlhTJ5WRDQHk1MnphQQ6IR06W74RxTF-ZSWWjcds8ZA==",  //ContactID's
                          "xAUc9Wt2C2TEf7810SHO49BHGxz7xZMBcuBQZpyj9dG-kcevbCMr3rlsjMuUOHXMNQhd_QLeLVy0YKIe-vwUIQ=="
                      ]
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1001,
                      "Responses": [
                        {
                          "ID": "gD7tqQFumWuP0P3Jxu_IYoNLsh6CbixlCAnuXbbwnTTUlhTJ5WRDQHk1MnphQQ6IR06W74RxTF-ZSWWjcds8ZA==",
                          "Response": {
                            "Code": 1000
                          }
                        },
                        {
                          "ID": "xAUc9Wt2C2TEf7810SHO49BHGxz7xZMBcuBQZpyj9dG-kcevbCMr3rlsjMuUOHXMNQhd_QLeLVy0YKIe-vwUIQ==",
                          "Response": {
                            "Code": 13043,
                            "Error": "Contact does not exist",
                            "Details": {}
                          }
                        }
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /contacts/emails:
    get:
      tags:
        - Contacts
      summary: Get a list of contact emails
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "ContactEmails": [ // Contacts are in order of decreasing priority
                            {
                                "ID": "afefafernXxBhSMw==",     // ContactList.ContactID
                                "Name": "ProtonMail Features",
                                "Email": "features@protonmail.black",
                                "Type": ["work"],
                                "Defaults": 1,                 // ignore for now, future feature
                                "Order": 1,                    // priority of this email for this ContactID
                                "ContactID": "gD7tqQFumWuP0P3Jxu_IYo==",
                                "LabelIDs": [                    // Groups
                                    "afeaefaefaef==",
                                    "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w=="
                                ]
                            },
                            {
                                "ID": "ertCMwWWSV6Pw==",
                                "Name": "Bob",
                                "Email": "derp@derp.com",
                                "Type": [],
                                "Defaults": 1,
                                "Order": 2,
                                "ContactID": "gD7tqQFumWuP0P3Jxu_IYo==",
                                "LabelIDs": []
                            }
                        ],
                        "Total": 2 // Total number of contact emails
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: Page
        in: query
        description: the page index
        required: false
        schema:
          type: integer
          example: 0
          default: 0
      - name: PageSize
        in: query
        description: 'the page size, maximum 1000'
        required: false
        schema:
          type: integer
          example: 1000
          default: 1000
      - name: Email
        in: query
        description: 'email to filter on, cannot be used with LabelID'
        required: false
        schema:
          type: string
          example: user@example.com
      - name: LabelID
        in: query
        description: 'label to filter on, cannot be used with Email'
        required: false
        schema:
          type: string
          example: LKJLalkfejl==
  /contacts/emails/label:
    put:
      tags:
        - Contacts
      summary: Label an array of ContactEmails
      requestBody:
        $ref: '#/components/requestBodies/LabelArrayOfContactEmails'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /contacts/emails/unlabel:
    put:
      tags:
        - Contacts
      summary: Unlabel an array of ContactEmails
      requestBody:
        $ref: '#/components/requestBodies/LabelArrayOfContactEmails'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /contacts/export:
    get:
      tags:
        - Contacts
      summary: Get all contacts for export
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Contacts": [                           // Contacts are not in any order
                            {
                                "ID": "afefafernXxBhSMw==",     // Contact.ContactID
                                "Cards": [
                                    {
                                        "Type": 3, // 0 for cleartext, 1 for encrypted only (not used), 2 for signed, 3 for both
                                        "Data": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                                        "Signature": "-----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----"
                                    },
                                    {
                                        "Type": 2,
                                        "Data": "BEGIN:VCARD\r\nVERSION:4.0\r\nPRODID:-//ProtonMail//ProtonMail vCard 1.0.0//EN\r\nFN:Test\r\nUID:proton-legacy-139892c2-f691-4118-8c29-061196013e04\r\nitem1.EMAIL;PREF=1:test@protonmail.dev\r\nEND:VCARD\r\n",
                                        "Signature": "-----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----"
                                    }
                                ]
                            },
                            {
                                "ID": "jhuafesr2srgaefSMw==",
                                "Cards": [
                                    {
                                        "Type": 0,
                                        "Data": "BEGIN:VCARD\r\nVERSION:4.0\r\nPRODID:-//ProtonMail//ProtonMail vCard 1.0.0//EN\r\nFN:ProtonMail Security\r\nUID:proton-legacy-139892c2-f692-4118-8c29-061196013e04\r\nitem1.EMAIL;PREF=1:security@protonmail.dev\r\nEND:VCARD\r\n",
                                        "Signature": null
                                    }
                                ]
                            }
                        ],
                        "Total": 2 // Total number of contacts
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: Page
        in: query
        description: the page index
        required: false
        schema:
          type: integer
          example: 0
          default: 0
      - name: PageSize
        in: query
        description: 'the page size, maximum 50'
        required: false
        schema:
          type: integer
          example: 50
          default: 50
      - name: LabelID
        in: query
        description: label to filter on
        required: false
        schema:
          type: string
          example: LKJLalkfejl==
  /contacts/label:
    put:
      tags:
        - Contacts
      summary: Label an array of contacts
      requestBody:
        $ref: '#/components/requestBodies/LabelArrayOfContacts'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /contacts/unlabel:
    put:
      tags:
        - Contacts
      summary: Unlabel an array of contacts
      requestBody:
        $ref: '#/components/requestBodies/LabelArrayOfContacts'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  '/contacts/{contact_id}':
    put:
      tags:
        - Contacts
      summary: Update a contact
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Cards": [
                          {
                              "Type": 2, // Signed, required
                              "Data": "BEGIN:VCARDr\nVERSION:4.0\r\nPRODID:-//ProtonMail//ProtonMail vCard 1.0.0//EN\r\nFN:ProtonMail Security\r\nUID:proton-legacy-139892c2-f692-4118-8c29-061196013e04\r\nitem1.EMAIL;PREF=1:security@protonmail.dev\r\nEND:VCARD\r\n",
                              "Signature": "-----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----"
                          }
                      ]
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Contact": {
                            "ID": "jhuafesr2srgaefSMw==",
                            "Name": "ProtonMail Security",
                            "UID": "proton-legacy-4bcd0f7f-acb6-4d27-9793-91adfd90750f",
                            "Size": 1234,
                            "CreateTime": 1503815366,
                            "ModifyTime": 1503815366,
                            "ContactEmails": [
                                {
                                    "ID": "aefew4323jFv0BhSMw==",   // ContactList.ContactID
                                    "Email": "security@protonmail.dev",
                                    "Type": [],
                                    "Defaults": 1,                 // ignore for now, future feature
                                    "Order": 1,
                                    "ContactID": "jhuafesr2srgaefSMw==",
                                    "LabelIDs": []                   // Groups
                                }
                            ],
                            "LabelIDs": []
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: contact_id
        in: path
        description: the encrypted ContactID
        schema:
          type: string
          example: lKJlejjlk==
        required: true
  '/contacts/{contactid}':
    get:
      tags:
        - Contacts
      summary: Get full Contact
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Contact": {
                            "ID": "a29olIjFv0rnXxBhSMw==",
                            "Name": "ProtonMail Features",
                            "UID": "proton-legacy-139892c2-f691-4118-8c29-061196013e04",
                            "Size": 1234,
                            "CreateTime": 1503815366,
                            "ModifyTime": 1503815366,
                            "ContactEmails": [
                                {
                                    "ID": "aefew4323jFv0BhSMw==",   // ContactList.ContactID
                                    "Email": "features@protonmail.black",
                                    "Type": ["work"],
                                    "Defaults": 1,                 // ignore for now, future feature
                                    "Order": 1,
                                    "ContactID": "a29olIjFv0rnXxBhSMw==",
                                    "LabelIDs": [                   // Groups
                                        "afeaefaefaef==",
                                        "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w=="
                                    ]
                                },
                                {
                                    "ID": "dbdvrafejFv0BhSMw==",
                                    "Email": "features@protonmail.ch",
                                    "Type": ["home"],
                                    "Defaults": 1,
                                    "Order": 2,
                                    "ContactID": "a29olIjFv0rnXxBhSMw==",
                                    "LabelIDs": []
                                }
                            ],
                            "LabelIDs": [                           // Labels on Contact, ignore, maybe future feature
                                "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w=="
                            ],
                            "Cards": [
                                {
                                    "Type": 3, // 0 for cleartext, 1 for encrypted only (not used), 2 for signed, 3 for both
                                    "Data": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                                    "Signature": "-----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----"
                                },
                                {
                                    "Type": 2,
                                    "Data": "BEGIN:VCARD\r\nVERSION:4.0\r\nPRODID:-//ProtonMail//ProtonMail vCard 1.0.0//EN\r\nFN:ProtonMail Features\r\nUID:proton-legacy-139892c2-f691-4118-8c29-061196013e04\r\nitem1.EMAIL;TYPE=work;PREF=1:features@protonmail.black\r\nitem2.EMAIL;TYPE=home;PREF=2:features@protonmail.ch\r\nEND:VCARD\r\n",
                                    "Signature": "-----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----"
                                }
                            ]
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: contactid
        in: path
        description: the ContactID
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  /conversations:
    get:
      tags:
        - Conversations
      summary: Get a list of conversations
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Total": 76,
                        "Conversations": [
                            {
                                "ID": "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w==",
                                "Order": 675,
                                "Subject": "Testing",
                                "Senders": [
                                    {
                                      "Address": "derp@derp.com",
                                      "Name": "John Smith"
                                    }
                                ],
                                "Recipients": [
                                    {
                                        "Address": "jason@protonmail.email",
                                        "Name": ""
                                    }
                                ],
                                "NumMessages": 5,
                                "NumUnread": 0,
                                "NumAttachments": 0,
                                "ExpirationTime": 0, // If non-zero, earliest expiration time in conversation
                                "TotalSize": 3555,
                                "AddressID": "AJuSqm0qvIL4LSMR9LWsqNOa2OlAU_Iqr2Qcducsz-ZA==",
                                "LabelIDs": [
                                    "0", // Inbox
                                    "10", // Starred
                                    "G5LuBhyf5dezEmhqiTNhqP1G3ZR8cxeyzU9oxAOcuwKyHng06rbg==" // User label
                                ],
                                "Labels": [
                                    {
                                        "ID": "0", // Inbox
                                        "NumUnread" : 0,
                                        "NumMessages": 5
                                    },
                                    {
                                        "ID": "10", // Starred
                                        "NumUnread" : 0,
                                        "NumMessages": 1
                                    },
                                    {
                                        "ID": "G5LuBhyf5dezEmhqiTNhqP1G3ZR8cxeyzU9oxAOcuwKyHng06rbg==", // User label
                                        "NumUnread" : 0,
                                        "NumMessages": 1
                                    }
                                ],
                                "Time": "1418736382" // Latest message time in conversation MATCHING FILTER, can change based on query!
                            }
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: Location
        in: query
        description: 'message location 0 => Inbox, 1 => Draft, 2 => Outbox, 3 => Trash, 4 => Spam, 6 => Archive'
        required: false
        schema:
          type: integer
          example: 0
          enum:
            - '0'
            - '1'
            - '2'
            - '3'
            - '4'
            - '6'
      - name: Page
        in: query
        description: the page index
        required: false
        schema:
          type: integer
          example: 0
          default: 0
      - name: PageSize
        in: query
        description: 'the page size, maximum 150'
        required: false
        schema:
          type: integer
          example: 50
          default: 50
      - name: Limit
        in: query
        description: 'the number of conversations to return, defaults to page size (1 page), maximum 150'
        required: false
        schema:
          type: integer
          default: 50
      - name: LabelID
        in: query
        description: label to filter on
        required: false
        schema:
          type: string
          example: <encrypted_label_id>
      - name: Desc
        in: query
        description: '0 => ASC, 1 => DESC'
        required: false
        schema:
          type: integer
          example: 1
          default: 1
          enum:
            - '0'
            - '1'
      - name: Begin
        in: query
        description: UNIX timestamp to filter conversations earlier than timestamp
        required: false
        schema:
          type: integer
          example: 1433807257
      - name: End
        in: query
        description: UNIX timestamp to filter conversations later than timestamp
        required: false
        schema:
          type: integer
          example: 1433807257
      - name: BeginID
        in: query
        description: 'return only conversations newer, in creation time (NOT timestamp), than BeginID if timestamp = Begin'
        required: false
        schema:
          type: string
          example: <encrypted_message_id>
      - name: EndID
        in: query
        description: 'return only conversations older, in creation time (NOT timestamp), than EndID if timestamp = End'
        required: false
        schema:
          type: string
          example: <encrypted_message_id>
      - name: Keyword
        in: query
        description: 'Keyword search of To, CC, BCC, From, Subject'
        required: false
        schema:
          type: string
          example: cheese
      - name: To
        in: query
        description: 'Keyword search of To, CC, BCC'
        required: false
        schema:
          type: string
          example: cheese
      - name: From
        in: query
        description: Keyword search of From
        required: false
        schema:
          type: string
          example: cheese
      - name: Subject
        in: query
        description: Keyword search of Subject
        required: false
        schema:
          type: string
          example: cheese
      - name: Attachments
        in: query
        description: 1 => at least one attachment(s)
        required: false
        schema:
          type: integer
          example: 1
          enum:
            - '1'
      - name: Starred
        in: query
        description: 1 => at least one starred message
        required: false
        schema:
          type: integer
          example: 1
          enum:
            - '1'
      - name: Unread
        in: query
        description: 1 => at least one unread message
        required: false
        schema:
          type: integer
          example: 1
          enum:
            - '1'
      - name: AddressID
        in: query
        description: address to filter on
        required: false
        schema:
          type: string
          example: <encrypted_address_id>
      - name: ID
        in: query
        description: conversation ID(s) to filter on
        required: false
        schema:
          oneOf:
            - type: string
              example: <encrypted_conv_id>
            - type: array
      - name: AutoWildcard
        in: query
        description: 'automatically convert simple queries to wildcarded versions, such as `test` to `*test*`'
        required: false
        schema:
          type: integer
          example: 1
  /conversations/count:
    get:
      tags:
        - Conversations
      summary: Get grouped conversation count
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Counts": [
                            {
                                "LabelID": "0",
                                "Total": 87.
                                "Unread": 15
                            },
                            {
                                "LabelID": "1",
                                "Total": 42,
                                "Unread": 10
                            },
                            {
                                "LabelID": "2",
                                "Total": 17,
                                "Unread": 7
                            },
                            {
                                "LabelID": "3",
                                "Total": 2,
                                "Unread": 2
                            },
                            {
                                "LabelID": "4",
                                "Total": 1,
                                "Unread": 0
                            },
                            {
                                "LabelID": "6",
                                "Total": 1,
                                "Unread": 0
                            },
                            {
                                "LabelID": "10",
                                "Total": 6,
                                "Unread": 1
                            },
                            {
                                "LabelID": "D4TVgdFKidFgQWd5IeXYyegjDNV9KWF1HDwjxZlesUo-Wc2NTL8mUQc6IlYwowznc5vHQkTL4iUbn6K0CorrjQ==",
                                "Total": 54,
                                "Unread": 18
                            },
                            {
                                "LabelID": "6CucpHSMwAfHV3iSUEdbrmI4VLCzM3lWd1NR5C2DGUmfx5Ljq2LEkynoD3y-15stpnTFqWMedJs-pwUUJH1waQ==",
                                "Total": 2,
                                "Unread": 0
                            }
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: AddressID
        in: query
        description: address to filter on
        required: false
        schema:
          type: string
          example: <encrypted_address_id>
  /conversations/delete:
    put:
      tags:
        - Conversations
      summary: Delete trashed messages in an array of conversations
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                          "IDs" : [
                              "KPlISx5MiML3XcSY-tfNw==",
                              "IwuSjbOUIN105YSvVrdig=="
                          ],
                          "LabelID" : "PjSFx5MiML3XcSY-tfNw==" // Optional, defaults to Trash (3)
                      }
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /conversations/label:
    put:
      tags:
        - Conversations
      summary: Label/move an array of conversations
      requestBody:
        $ref: '#/components/requestBodies/LabelArrayOfIds'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /conversations/read:
    put:
      tags:
        - Conversations
      summary: Mark an array of conversations as read
      requestBody:
        $ref: '#/components/requestBodies/ArrayOfIds'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /conversations/unlabel:
    put:
      tags:
        - Conversations
      summary: Unlabel an array of conversations
      requestBody:
        $ref: '#/components/requestBodies/LabelArrayOfIds'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /conversations/unread:
    put:
      tags:
        - Conversations
      summary: Mark an array of conversations as unread
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                          "IDs" : [
                              "KPlISx5MiML3XcSY-tfNw==",
                              "IwuSjbOUIN105YSvVrdig=="
                          ],
                          "LabelID" : "PjSFx5MiML3XcSY-tfNw==" // Optional, defaults to AllMail (5)
                      }
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  '/conversations/{conversationid}':
    get:
      tags:
        - Conversations
      summary: Get conversation and associated message metadata
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Conversation": {
                            "ID": "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w==",
                            "Order": 678,
                            "Subject": "Re: Checking in",
                            "Senders": [
                                {
                                    "Address": "example@example.com",
                                    "Name": "Example McExample"
                                }
                            ],
                            "Recipients": [
                                {
                                    "Address": "jason@protonmail.ch",
                                    "Name": "Jason Stockman"
                                }
                            ],
                            "NumMessages": 1,
                            "NumUnread": 0,
                            "NumAttachments": 0,
                            "ExpirationTime": 0,
                            "TotalSize": 10133,
                            "AddressID": "AJuSqm0qvIL4LSMR9LWsqNOa2OlAU_Iqr2Qcducsz-ZA==",
                            "LabelIDs": [
                                "0", // Inbox
                                "10", // Starred
                                "G5LuBhyf5dezEmhqiTNhqP1G3ZR8cxeyzU9oxAOcuwKyHng06rbg==" // User label
                            ]
                            "Labels": [
                                {
                                    "ID": "0", // Inbox
                                    "NumUnread" : 0,
                                    "NumMessages": 1
                                },
                                {
                                    "ID": "10", // Starred
                                    "NumUnread" : 0,
                                    "NumMessages": 1
                                },
                                {
                                    "ID": "G5LuBhyf5dezEmhqiTNhqP1G3ZR8cxeyzU9oxAOcuwKyHng06rbg==", // User label
                                    "NumUnread" : 0,
                                    "NumMessages": 1
                                }
                            ]
                        },
                        "Messages": [
                            {   // Metadata for all but one messages
                                "ID": "qvIL4LSMR9LWsqNOa2OlAU_Iqr2Qcducsz-ZA==",
                                "Order": 734,
                                "ConversationID": "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w==",
                                "Subject": "Re: Checking in",
                                "Unread": 0,
                                "Type": 0, // 0 = INBOX, 1 = DRAFT, 2 = SENT, 3 = INBOX_AND_SENT
                                "Sender": {
                                    "Address": "example@example.com",
                                    "Name": "Example McExample"
                                },
                                "ToList": [
                                    {
                                        "Address": "jason@protonmail.ch",
                                        "Name": "Jason Stockman"
                                    }
                                ],
                                "Time": 1419011135,
                                "Size": 10133,
                                "Location": 0, // To be removed
                                "Starred": 1, // To be removed
                                "HasAttachment": 0,
                                "IsEncrypted": 2,
                                "ExpirationTime": 0,
                                "IsReplied": 0,
                                "IsRepliedAll": 1,
                                "IsForwarded": 0,
                                "AddressID": "222",
                                "CCList":[

                                ],
                                "BCCList":[

                                ],
                                "LabelIDs": [
                                    "0", // Inbox
                                    "10", // Starred
                                    "G5LuBhyf5dezEmhqiTNhqP1G3ZR8cxeyzU9oxAOcuwKyHng06rbg==" // User label
                                ]
                            },
                            {   // Full message for one message
                                "ID": "ASFIkGVa11jda2OlAU_Iqr2Qcducsz-ZA==",
                                "Order": 756,
                                "ConversationID": "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w==",
                                "Subject": "Re: Checking in",
                                "Unread": 0,
                                "Type": 0, // 0 = INBOX, 1 = DRAFT, 2 = SENT, 3 = INBOX_AND_SENT
                                "Sender": {
                                    "Address": "example@example.com",
                                    "Name": "Example McExample"
                                },
                                "ToList": [
                                    {
                                        "Address": "jason@protonmail.ch",
                                        "Name": "Jason Stockman"
                                    }
                                ],
                                "Time": 1419011135,
                                "Size": 10133,
                                "Location": 0, // To be removed
                                "Starred": 1, // To be removed
                                "HasAttachment": 0,
                                "IsEncrypted": 2,
                                "ExpirationTime": 0,
                                "IsReplied": 0,
                                "IsRepliedAll": 1,
                                "IsForwarded": 0,
                                "SpamScore": 0,
                                "AddressID": "222",
                                "Body": "-----BEGIN PGP MESSAGE----- -----END PGP MESSAGE-----",
                                "MIMEType": "text/html",
                                "CCList": [],
                                "BCCList": [],
                                "Header": "(No Header)",
                                "ReplyTo": {
                                    "Address": "example@example.com",
                                    "Name": "Example McExample"
                                },
                                "ReplyTos": [
                                    {
                                        "Address": "example@example.com",
                                        "Name": "Example McExample"
                                    },
                                    {
                                        "Address": "second@example.com",
                                        "Name": "Second McExample"
                                    }
                                ],
                                "Attachments": [],
                                "LabelIDs": [
                                    "0", // Inbox
                                    "10", // Starred
                                    "G5LuBhyf5dezEmhqiTNhqP1G3ZR8cxeyzU9oxAOcuwKyHng06rbg==" // User label
                                ]
                            }
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: conversationid
        in: path
        description: the conversation id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
      - name: MessageID
        in: query
        description: specific message in conversation to return fully (not only metadata)
        required: false
        schema:
          type: string
          example: <encrypted_message_id>
  /devices:
    post:
      tags:
        - Devices
      summary: Register device
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "DeviceUID": "{uid}",
                      "DeviceToken": "{token}",
                      "DeviceName": "{name}",
                      "DeviceModel": "{model}",
                      "DeviceVersion": "{version}",
                      "AppVersion": "iOS_0.1.0",
                      "Environment": "{integer}" // Optional
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Devices
      summary: UnRegister device
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  '/devices/android/{token}':
    post:
      tags:
        - Devices
      summary: Android Notification Test
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Title": "title message",
                    "Subtitle": "subtitle message",
                    "Badge": 2,
                    "Text": "Test Message with will be the subject when live",
                    "MessageID": "CdlKuzptf4907WykwVmdMJlVzUX80whXCUjiQFo48938ThDqBgW-I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w=="
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: token
        in: path
        description: the token
        schema:
          type: string
          example: abcdefghijklm
        required: true
  '/devices/ios/{token}':
    post:
      tags:
        - Devices
      summary: iOS Notification Test
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Badge": 2,
                    "Text": "Test Message with will be the subject when live",
                    "MessageID": "CdlKuzptf4907WykwVmdMJlVzUX80whXCUjiQFo48938ThDqBgW-I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w=="
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: token
        in: path
        description: the token
        schema:
          type: string
          example: abcdefghijklm
        required: true
  /domains:
    get:
      tags:
        - Domains
      summary: Get all domains for this user's organization and check their DNS's
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Domains": [
                            {
                                "ID": "BKiAUbkGnUPiy2c37zjon_g==",
                                "DomainName": "DingchaoLu.com",
                                "VerifyCode": "protonmail-verification=c701a28e2bdd3358c6dda71a3008b806e41950b0",
                                "DkimPublicKey": "v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDKZ4rqzKDKrfJHKNfTgh1B/3NtoHrR8T4YXTuHltpFJlhc+GcjDEpf2tvzHnR7R7EbhOdiwy4SLgCXqEIRQe7swOT8vq5zPZ6/I50o8isxz50QlkvNoIWyeiNQqlDPQLQey0QXSfLznQY/bHxvKAqAi33CCHwS/OPuuWcHq8DCqQIDAQAB",
                                "State": 1,  // 0 is default, 1 is active (verified), 2 is warn (dns issue)
                                "CheckTime": 1446095611,
                                "VerifyState": 2,   // 0 is default, 1 is has code but wrong, 2 is good
                                "MxState": 3,   // 0 is default, 1 is set but no us, 2 has us but priority is wrong, 3 is good
                                "SpfState": 3,  // 0 is default, 1 and 2 means detected a record but wrong, 3 is good
                                "DkimState": 4,     // 0 is default, 1 and 2 means detected record but wrong, 3 means key is wrong, 4 is good, 5 is turned off by user through DNS
                                "DmarcState": 3,    // 0 is default, 1 and 2 means detected record but wrong, 3 is good
                            },
                            {
                                "ID": "FK4MKKIVJqOC9Pg_sAxCjNWf8PM9yGzrXO3eXq8sk5RJB6HtaRBNUEcnvJBrQVPAtrDSoTNq4Du3FpqIxyMhHQ==",
                                "DomainName": "funoccupied.com",
                                "VerifyCode": "protonmail-verification=1d439ec16a149d45b1e7b54ed57bf197b89ac1aa",
                                "DkimPublicKey": null,
                                "State": 0,
                                "CheckTime": 1446096501,
                                "VerifyState": 2,
                                "MxState": 1,
                                "SpfState": 1,
                                "DkimState": 0,
                                "DmarcState": 0,
                            }
                        ],
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Domains
      summary: Create new Dom
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Name": "funoccupied.com"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 30106,
                      "Error": "Domain setup failed or domain is already in use within ProtonMail",
                      "Details": {}
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /domains/available:
    get:
      tags:
        - Domains
      summary: Get available domains
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Domains": [
                            'protonmail.com',
                            'protonmail.ch'
                        ],
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
  /domains/premium:
    get:
      tags:
        - Domains
      summary: Get premium domains
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Domains": [
                            'pm.me'
                        ],
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
  '/domains/{domainid}':
    get:
      tags:
        - Domains
      summary: Get a specific domains and its check DNS
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Domain": {
                            "ID": "BKiAUbkGnUPiy2c3nJs6qdQrdvHj7zjon_g==",
                            "DomainName": "DingchaoLu.com",
                            "VerifyCode": "protonmail-verification=c701a28e2bdd3358c6dda71a3008b806e41950b0",
                            "DkimPublicKey": "v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDKZ4rqzKDKrfJHKNfTgh1B/3NtoHrR8T4YXTuHltpFJlhc+GcjDEpf2tvzHnR7R7EbhOdiwy4SLgCXqEIRQe7swOT8vq5zPZ6/I50o8isxz50QlkvNoIWyeiNQqlDPQLQey0QXSfLznQY/bHxvKAqAi33CCHwS/OPuuWcHq8DCqQIDAQAB",
                            "State": 1,
                            "CheckTime": 1446099804,
                            "VerifyState": 2,
                            "MxState": 3,
                            "SpfState": 3,
                            "DkimState": 4,
                            "DmarcState": 3,
                        },
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Domains
      summary: Delete a Domai
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: domainid
        in: path
        description: the encrypted id
        schema:
          type: string
          example: lKJlejjlk==
        required: true
  '/domains/{domainid}/addresses':
    get:
      tags:
        - Domains
      summary: Get a specific domain's addresses
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Addresses": [
                            {
                                "ID": "vuGSa1zsx0kV0jsfhX_xKSDQ0dvcLdMduA_c2c9fhaC1ZYCZKe8gony7nIWbnqaj8gebXLCQre1H1ZTKkhhFxA==",
                                "Email": "me@dingchaolu.com",
                                "Send": 1,          // 1 is active address (Status=1 and has key), 0 is inactive (cannot send)
                                "Status": 1,        // 0 is disabled, 1 is enabled, can be set by user
                                "Type": 1,          // 1 is original PM, 2 is PM alias, 3 is custom domain address
                                "Receive": 1,       // 1 is active address (Status=1 and has key), 0 is inactive (cannot receive)
                                "Order": 5,
                                "DisplayName": "hi", // From user object if no address display name set
                                "Signature": "signature", // From user object if no address signature set
                                "HasKeys" : 1,
                                "CatchAll": 0, // whether this is the catch-all address for this domain
                                "MemberID": "gony7nIWbnqaj8gebXLCQre1H1ZTKkhhFxA=="
                            }
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: domainid
        in: path
        description: the encrypted id
        schema:
          type: string
          example: lKJlejjlk==
        required: true
      - name: Page
        in: query
        description: the page index
        required: false
        schema:
          type: integer
          example: 0
          default: 0
      - name: PageSize
        in: query
        description: 'the page size, maximum 150'
        required: false
        schema:
          type: integer
          example: 150
          default: 150
  '/domains/{domainid}/catchall':
    put:
      tags:
        - Domains
      summary: Set catch-all
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "AddressID": "<encrypted_id>" // or null to unset
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: domainid
        in: path
        description: the encrypted id
        schema:
          type: string
          example: lKJlejjlk==
        required: true
  '/eo/attachment/{attachmentID}':
    get:
      tags:
        - EO
      summary: Get an EO attachment by ID
      responses:
        '200':
          headers:
            Content-Disposition:
              schema:
                type: string
                example: attachment; filename = "Issue 4.png"
            Content-Length:
              schema:
                type: string
                example: '1532'
            Content-Transfer-Encoding:
              schema:
                type: string
                example: binary
          content:
            image/png:
              examples:
                example:
                  value: '{binary_file_content_or_encrypted_data_packet}'
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-eo-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_any'
      - name: attachmentID
        in: path
        schema:
          type: string
          example: <encrypted attachment id>
        required: true
  /eo/message:
    get:
      tags:
        - EO
      summary: Get an EO message
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code":1000,
                        "Message":{
                            "Subject":"enc outside test 2",
                            "Sender": {
                                "Address":"jason@protonmail.dev",
                                "Name":"\u79d1\u6280\u798f\u5e03\u65af\u4e2d\u6587\u7f51"
                            },
                            "Recipient": "bart.c.butler@gmail.com",
                            "ToList":[
                                {
                                    "Address":"bart.c.butler@gmail.com",
                                    "Name":""
                                },
                                {
                                    "Address":"jason@localhost",
                                    "Name":""
                                }
                            ],
                            "CCList":[

                            ],
                            "Time":1428362148,
                            "ExpirationTime":1428369148,
                            "Body":" -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                            "Replies":[
                                {
                                    "Time":1434490380,
                                    "Body":"-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                                    "Attachments":[

                                    ]
                                },
                                {
                                    "Time":1434490488,
                                    "Body":"-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                                    "Attachments":[

                                    ]
                                }
                            ],
                            "NumAttachments": 0,
                            "Attachments":[

                            ]
                        },
                        "PublicKey": "-----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK-----" // Sender public key, for replies
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-eo-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /eo/reply:
    post:
      tags:
        - EO
      summary: Reply to an EO message
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
            examples:
              example:
                value: |-
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="Body"

                  -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="ReplyBody"

                  -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW       // Optionally, one or more attachments in arrays
                  Content-Disposition: form-data; name="Filename[]"

                  test.txt
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="MIMEType[]"

                  text/plain
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="ContentID[]" // For embedded images. Empty string is no content ID

                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="KeyPackets[]"; filename="temp1"
                  Content-Type: doesnot/matter

                  {binary key packet(s)}

                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="DataPacket[]"; filename="temp2"
                  Content-Type: doesnot/matter

                  {encrypted data packet}

                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Reply": {
                        "Time": 1434491458,
                        "Body": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                        "Attachments": []
                      }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-eo-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  '/eo/token/{tokenID}':
    get:
      tags:
        - EO
      summary: Get an encrypted access token by ID
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Token": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----"
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: tokenID
        in: path
        schema:
          type: string
          example: <tokenID from notification email>
        required: true
  /events/latest:
    get:
      tags:
        - Events
      summary: 'Get latest event ID, only use with empty cache to bootstrap event stream'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "EventID": "ACXDmTaBub14w=="
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  '/events/{eventid}':
    get:
      tags:
        - Events
      summary: Get events since id
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code":1000,
                        "EventID":"ACXDmTaBub14w==", // new client event ID, send with next request
                        "Refresh":0, // bitmap, 255 means throw out client cache and reload everything from server, 1 is mail, 2 is contacts
                        "More": 0, // 1 if more events exist and should be fetched
                        "Messages":[  // Present if message updated by anyone, or created by different UID
                            {
                                "ID":"FSDfsACXDmTaBub14asdfw==",
                                "Action":0 // DELETE code, delete from cache/lists if present
                            },
                            {
                                "ID":"adsfasdfasfACXDmTaBub14w==",
                                "Action":1, // CREATE code, metadata provided for message list update
                                "Message":{
                                    "ID":"adsfasdfasfACXDmTaBub14w==",
                                    "Subject":"Hi",
                                    "Unread":0,
                                    "Type": 0, // 0 = INBOX, 1 = DRAFT, 2 = SENT, 3 = INBOX_AND_SENT
                                    "Sender": {
                                        "Address":"jason@protonmail.dev",
                                        "Name":"\u79d1\u6280\u798f\u5e03\u65af\u4e2d\u6587\u7f51"
                                    },
                                    "ToList":[
                                        {
                                            "Address":"bart.c.butler@gmail.com",
                                            "Name":"Bart"
                                        },
                                        {
                                            "Address":"bartqa@localhost",
                                            "Name":"Bart"
                                        }
                                    ],
                                    "Time":1435258429,
                                    "Size":6959782,
                                    "Location":1, // Deprecated, use LabelIDs instead
                                    "Starred":0, // Deprecated, use LabelIDs instead
                                    "HasAttachment":1, // Deprecated, use NumAttachments instead
                                    "NumAttachments":1,
                                    "IsEncrypted":5,
                                    "ExpirationTime":0,
                                    "IsReplied":0,
                                    "IsRepliedAll":0,
                                    "IsForwarded":0,
                                    "AddressID":"adsfasdfasfACXDmTaBub14w==",
                                    "CCList":[

                                    ],
                                    "BCCList":[

                                    ],
                                    "LabelIDs":[
                                        "1"
                                    ]
                                }
                            },
                            {
                                "ID":"sadfaACXDmTaBub14w==",
                                "Action":2, // UPDATE code, updated message (draft), only some flags provided but should reload this message if relevant to client
                                "Message":{
                                    "Unread":0, // Can be present
                                    "Type": 1, // Can be present, 0 = INBOX, 1 = DRAFT, 2 = SENT, 3 = INBOX_AND_SENT
                                    "Time":1435258429, // Always present
                                    "Location":1, // Deprecated, use LabelIDs instead
                                    "Starred":0, // Deprecated, use LabelIDs instead
                                    "IsReplied":0, // Can be present
                                    "IsRepliedAll":0, // Can be present
                                    "IsForwarded":0 // Can be present
                                }
                            },
                            {
                                "ID":"ACXDmTaBub14w==",
                                "Action":3, // UPDATE_FLAGS code, update message flags only, apply to client cache
                                "Message":{
                                    "Unread":0, // Can be present
                                    "Type": 0, // Can be present, 0 = INBOX, 1 = DRAFT, 2 = SENT, 3 = INBOX_AND_SENT
                                    "Time":1435258429, // Always present
                                    "Location":0, // Deprecated, use LabelIDs instead
                                    "Starred":0, // Deprecated, use LabelIDs instead
                                    "IsReplied":0, // Can be present
                                    "IsRepliedAll":0, // Can be present
                                    "IsForwarded":0, // Can be present
                                    "LabelIDs":[ // If present, replace LabelIDs with these
                                        "0",
                                        "TGmTaBub14w==",
                                        "ACXDmTaBub14w=="
                                    ],
                                    "LabelIDsAdded": [
                                        "DmTaBub14w==" // If present, add these labels to message
                                    ],
                                    "LabelIDsRemoved": [
                                        "VsSDFb14w==" // If present, remove these labels from message
                                    ]
                                }
                            }
                        ],
                        "Contacts":[
                            {
                                "ID":"afeaefaeTaBub14w==",
                                "Action":1, // Can be CREATE, UPDATE, OR DELETE
                                "Contact":{
                                    "ID":"sadfaACXDmTaBub14w==",
                                    "Name":"test1",
                                    "Data": [    // can be empty
                                        {
                                            "Type": 1,
                                            "Data": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----"
                                        }
                                    ],
                                    "LabelIDs":[],
                                    "Emails":[
                                        {
                                            "ID": "aefew4323jFv0BhSMw==",   // ContactList.ContactID
                                            "Email": "features@protonmail.black",
                                            "Type": "work",
                                            "Defaults": "1",                 // ignore for now, future feature
                                            "Order": "1",
                                            "ContactID": "sadfaACXDmTaBub14w==",
                                            "LabelIDs": [                   // Groups
                                                "afeaefaefaef==",
                                                "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w=="
                                            ]
                                        },
                                        {
                                            "ID": "dbdvrafejFv0BhSMw==",
                                            "Email": "features@protonmail.ch",
                                            "Type": "home",
                                            "Defaults": "1",
                                            "Order": "2",
                                            "ContactID": "sadfaACXDmTaBub14w==",
                                            "LabelIDs": []
                                        }
                                    ]
                                }
                            }
                        ],
                        "ContactEmails":[    // Contact Emails
                            {
                                "ID":"sadfaACXDmTaBub14w==",
                                "Action":1, // Can be CREATE, UPDATE, OR DELETE
                                "ContactEmail":{
                                    "ID":"dbdvrafejFv0BhSMw==",
                                    "Name":"test1",
                                    "Email":"mctester@tester.com",
                                    "Type":"work",
                                    "Defaults":"1",
                                    "Order":"1",
                                    "ContactID":"sadfaACXDmTaBub14w",
                                    "LabelIDs": [                   // Groups
                                        "afeaefaefaef==",
                                        "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w=="
                                    ]
                                }
                            }
                        ],
                        "Labels":[
                            {
                                "ID":"sadfaACXDmTaBub14w==",
                                "Action":1, // Can be CREATE, UPDATE, OR DELETE
                                "Label":{
                                    "ID":"sadfaACXDmTaBub14w==",
                                    "Name":"Event Label!",
                                    "Color":"#f66",
                                    "Display":1,
                                    "Order":8,
                                    "Type":1,     // different for Messages, Contact Groups
                                    "Exclusive": 0 // 0 for labels, 1 for folders
                                }
                            }
                        ],
                        "Subscription": {
                            "ID": "<encrypted_sub_id>",
                            "InvoiceID": "<encrypted_invoice_id>",
                            "Cycle": 1,
                            "PeriodStart": 1455617471,
                            "PeriodEnd": 1458119471,
                            "CouponCode": null,
                            "Currency": "USD",
                            "Amount": 1500,
                            "Plans": [
                                {
                                    "ID": "<encrypted_plan_id2>",
                                    "Type": 1,
                                    "Cycle": 1,
                                    "Name": "business",
                                    "Title": "ProtonMail Business (monthly)",
                                    "Currency": "USD",
                                    "Amount": 1000,
                                    "MaxDomains": 1,
                                    "MaxAddresses": 5,
                                    "MaxSpace": 10737418240,
                                    "MaxMembers": 2,
                                    "MaxVPN": 0,
                                    "Services": 1, // bits, 1 = mail, 4 = VPN
                                    "Features": 1 // bits, 1 = catch-all addresses
                                },
                                {
                                    "ID": "<encrypted_plan_id2>",
                                    "Type": 0,
                                    "Cycle": 1,
                                    "Name": "1member",
                                    "Title": "+1 Member (monthly)",
                                    "Currency": "USD",
                                    "Amount": 500,
                                    "MaxDomains": 0,
                                    "MaxAddresses": 0,
                                    "MaxSpace": 0,
                                    "MaxMembers": 1,
                                    "MaxVPN": 0,
                                    "Services": 1, // bits, 1 = mail, 4 = VPN
                                    "Features": 0 // bits, 1 = catch-all addresses
                                }
                            ]
                        },
                        "User": {
                            "ID": "MJLke8kWh1BBvG95JBIrZvzpgsZ94hNNgjNHVyhXMiv4g9cn6SgvqiIFR5cigpml2LD_iUk_3DkV29oojTt3eA==",
                            "Name": "jason",
                            "UsedSpace": 96691332,
                            "Currency": "USD",
                            "Credit": 0,
                            "MaxSpace": 10737418240,
                            "MaxUpload": 26214400,
                            "Role": 2,
                            "Private": 1,
                            "Subscribed": 1,
                            "Services": 1,
                            "Delinquent": 0,
                            "Keys": [
                                {
                                    "ID": "IlnTbqicN-2HfUGIn-ki8bqZfLqNj5ErUB0z24Qx5g-4NvrrIc6GLvEpj2EPfwGDv28aKYVRRrSgEFhR_zhlkA==",
                                    "Version": 3,
                                    "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----*-----END PGP PRIVATE KEY BLOCK-----",
                                    "Fingerprint": "c93f767df53b0ca8395cfde90483475164ec6353",
                                    "Activation": null,
                                    "Primary": 1
                                }
                            ]
                        },
                        "UserSettings": {
                            "PasswordMode": 1,
                            "Email": {
                                "Value": "abc@gmail.com",
                                "Status": 0,
                                "Notify": 1,
                                "Reset": 0
                            },
                            "News": 244,
                            "Locale": "en_US",
                            "LogAuth": 2,
                            "InvoiceText": "",
                            "TwoFactor": 0
                        },
                        "MailSettings": {
                            "DisplayName": "Put Chinese Here",
                            "Signature": "This is my signature",
                            "Theme": "",
                            "AutoResponder": {
                                "StartTime": 0, // seconds relative to the start of the period (unix timestamp for fixed interval)
                                "Endtime" :  0, // seconds relative to the end of the period (unix timestamp for fixed interval)
                                "Repeat": 0, // Mode: 0 => fixed interval, 1 => daily, 2 => weekly, 3 => monthly, 4 => permanent
                                "DaysSelected": [], // For daily mode: the day of the week expressed as an integer between 0 and 6. 0 is Sunday, 1 is Monday, etc.
                                "Subject": "Auto", // The subject prefix: e.g. "Re" for "Re: <original subject>"
                                "Message": "",
                                "IsEnabled: false,
                                "Zone": "Europe/Zurich"
                            },
                            "AutoSaveContacts": 1,
                            "AutoWildcardSearch": 1,
                            "ComposerMode": 1,
                            "MessageButtons": 0,
                            "ShowImages": 1,
                            "ShowMoved": 3,
                            "ViewMode": 0,
                            "ViewLayout": 0,
                            "SwipeLeft": 0,
                            "SwipeRight": 3,
                            "AlsoArchive": 0,
                            "Hotkeys": 1,
                            "PMSignature": 1,
                            "ImageProxy": 0,
                            "NumMessagePerPage": 50,
                            "DraftMIMEType": "text/html",
                            "ReceiveMIMEType": "text/html",
                            "ShowMIMEType": "text/html"
                        },
                        "VPNSettings": {
                            "Name": "jason1",
                            "Password": "123",
                            "GroupID": "jason",
                            "Status": 1, // 0 = no vpn access, 1 = vpn access, 2 = vpn access eligible, 3 = vpn access requested (waitlist)
                            "ExpirationTime": 0, // only relevant for 'trial' plan, timestamp if non-zero
                            "PlanName": "visionary", // other plans include 'free' and 'trial'
                            "MaxConnect": 10,
                            "MaxTier": 2
                        },
                        "Invoices": [
                            {
                                "ID": "IlnTbqicN-2HfUGIn-ki8bqZfLqNj5ErUB0z24Qx5g-4NvrrIc6GLvEpj2EPfwGDv28aKYVRRrSgEFhR_zhlkA==",
                                "Action": 1,
                                "Invoice": {
                                    "ID": "IlnTbqicN-2HfUGIn-ki8bqZfLqNj5ErUB0z24Qx5g-4NvrrIc6GLvEpj2EPfwGDv28aKYVRRrSgEFhR_zhlkA==",
                                    "Type": 4,
                                    "State": 1,
                                    "Currency": "USD",
                                    "AmountDue": 0,
                                    "AmountCharged": 0,
                                    "CreateTime": 1505758141,
                                    "ModifyTime": 1506449824,
                                    "AttemptTime": 1506449824,
                                    "Attempts": 1
                                }
                            }
                        ],
                        "Members": [
                            {
                                "ID": "LO9aACXDmTaBub14w==",
                                "Action": 1,
                                "Member": {
                                    "MemberID": "LO9aACXDmTaBub14w==",
                                    "Role": 1,
                                    "Private": 0,
                                    "Type": 0,
                                    "MaxSpace": 0,
                                    "Name": "Jason",
                                    "UsedSpace": 0,
                                    "Addresses": []
                                }
                            }
                        ],
                        "Domains": [
                            {
                                "ID": "9aACXDmTaBub14w==",
                                "Action": 2,
                                "Domain": {
                                    "ID": "9aACXDmTaBub14w==",
                                    "DomainName": "derp.com",
                                    "VerifyCode": "protonmail-verification=ba66be18a3063bb3596637fc13be0343ce4508fe",
                                    "MxRecord": null,
                                    "SpfRecord": null,
                                    "DkimRecord": null,
                                    "DkimPublicKey": null,
                                    "DmarcRecord": null,
                                    "State": 0,
                                    "CheckTime": 0,
                                    "VerifyState": 0,
                                    "MxState": 0,
                                    "SpfState": 0,
                                    "DkimState": 0,
                                    "DmarcState": 0
                                }
                            }
                        ],
                        "Addresses": [
                            {
                                "ID": "q_9v-GXEPLagg81jsUz2mHQ==",
                                "Action": 2,
                                "Address": {
                                    "ID": "q_9v-GXEPLagg81jsUz2mHQ==",
                                    "DomainID": "l8vWAXHBQmvzmKUA==",
                                    "Email": "test@protonmail.com",
                                    "Send": 0,
                                    "Receive": 0,
                                    "Status": 0,
                                    "Type": 2,
                                    "Order": 8,
                                    "DisplayName": "Namey",
                                    "Signature": "Sent from <a href=\"https://protonmail.ch\">ProtonMail</a>, encrypted email based in Switzerland.",
                                    "HasKeys": 1,
                                    "Keys": [
                                        {
                                            "ID": "a0f5_q7xkcyON1blZKTPxmBceURtzhW5Jc1rhtWUw5w2QXCMkSzHNustWtTjUlma9JmiL8O71aimfMOyY3UUGQ==",
                                            "Version": 3,
                                            "PublicKey": "-----BEGIN PGP PUBLIC KEY BLOCK-----...-----END PGP PUBLIC KEY BLOCK-----",
                                            "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----...-----END PGP PRIVATE KEY BLOCK-----",
                                            "Fingerprint": "e7e5466d21ff064ef870a7a393526f79e83004b0",
                                            "Activation": null,
                                            "Primary": 1
                                        }
                                    ]
                                }
                            }
                        ],
                        "Organization": {
                            "DisplayName": "E-Corp2",
                            "PlanName": "plus",
                            "MaxDomains": 4,
                            "MaxAddresses": 20,
                            "MaxSpace": 10000000000,
                            "MaxMembers": 15,
                            "Use2FA": 1,
                            "BillingCycle": 1,
                            "NextPaymentTime": 1454198012,
                            "BillingStatus": 3,
                            "ExternalProvider": "Stripe",
                            "UsedDomains": 1,
                            "UsedMembers": 3,
                            "UsedAddresses": 0,
                            "UsedSpace": 81785940,
                            "AssignedSpace": 10000000000
                        },
                        "MessageCounts":[  // Present if messages have been updated
                            {
                                "LabelID":"0",
                                "Total":15,
                                "Unread":6
                            },
                            {
                                "LabelID":"1",
                                "Total":62,
                                "Unread":32
                            },
                            {
                                "LabelID":"2",
                                "Total":10,
                                "Unread":1
                            }
                        ],
                        "ConversationCounts":[  // Present if conversations have been updated
                            {
                                "LabelID":"0",
                                "Total":4,
                                "Unread": 3
                            },
                            {
                                "LabelID":"1",
                                "Total":12,
                                "Unread": 9
                            },
                            {
                                "LabelID":"2",
                                "Total":5,
                                "Unread": 2
                            }
                        ],
                        "UsedSpace":70376905, // Sometimes present
                        "Notices": [
                            "This is an announcement",
                            "This is another announcement"
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: eventid
        in: path
        description: the current client event id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  /filters:
    get:
      tags:
        - Filters
      summary: Get filters owned by the current user
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Filters": [
                        {
                          "ID": "Ik65N-aChBuWFdo1JpmHJB4iWetfzjVLNILERQqbYFBZc5crnxOabXKuIMKhiwBNwiuogItetAUvkFTwJFJPQg==",
                          "Name": "Updated",
                          "Status": 1,
                          "Priority": 1,
                          "Sieve": "require [\"fileinto\"]; if address :DOMAIN :is [\"From\", \"Delivered-To\"] \"protonmail.ch\" { fileinto \"mylabel\"; } else { keep; }",
                          "Tree": [
                            {
                              "If": {
                                "Headers": [
                                  "From",
                                  "Delivered-To"
                                ],
                                "Keys": [
                                  "protonmail.ch"
                                ],
                                "Match": {
                                  "Type": "Is"
                                },
                                "Format": {
                                  "Type": "UnicodeCaseMap"
                                },
                                "Type": "Address",
                                "AddressPart": {
                                  "Type": "Domain"
                                }
                              },
                              "Then": [
                                {
                                  "Type": "Fileinto",
                                  "Name": "mylabel"
                                }
                              ],
                              "Type": "If"
                            }
                          ],
                          "Version": 1
                        }
                      ],
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Filters|Create filters
      summary: Add filter using Tree
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Name": "Example",
                    "Tree": [
                      {
                        "List": [
                          "fileinto"
                        ],
                        "Type": "Require"
                      },
                      {
                        "If": {
                          "Headers": [
                            "From",
                            "Delivered-To"
                          ],
                          "Keys": [
                            "protonmail.ch"
                          ],
                          "Match": {
                            "Type": "Is"
                          },
                          "Format": {
                            "Type": "UnicodeCaseMap"
                          },
                          "Type": "Address",
                          "AddressPart": {
                            "Type": "Domain"
                          }
                        },
                        "Then": [
                          {
                            "Name": "mylabel",
                            "Type": "FileInto"
                          }
                        ],
                        "Type": "If",
                        "Else": [
                          {
                            "Type": "Keep"
                          }
                        ]
                      }
                    ],
                    "Version": 1
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Filter": {
                        "ID": "1004",
                        "Name": "Example",
                        "Status": 1,
                        "Priority": 3,
                        "Sieve": "require [\"fileinto\"]; if address :DOMAIN :is [\"From\", \"Delivered-To\"] \"protonmail.ch\" { fileinto \"mylabel\"; } else { keep; }",
                        "Tree": [
                          {
                            "List": [
                              "fileinto"
                            ],
                            "Type": "Require"
                          },
                          {
                            "If": {
                              "Headers": [
                                "From",
                                "Delivered-To"
                              ],
                              "Keys": [
                                "protonmail.ch"
                              ],
                              "Match": {
                                "Type": "Is"
                              },
                              "Format": {
                                "Type": "UnicodeCaseMap"
                              },
                              "Type": "Address",
                              "AddressPart": {
                                "Type": "Domain"
                              }
                            },
                            "Then": [
                              {
                                "Name": "mylabel",
                                "Type": "FileInto"
                              }
                            ],
                            "Type": "If",
                            "Else": [
                              {
                                "Type": "Keep"
                              }
                            ]
                          }
                        ],
                        "Version": 1
                      },
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Filters
      summary: Delete all of user's filters
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /filters/check:
    put:
      tags:
        - Filters
      summary: Check sieve filter syntax
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Version": 1,
                    "Sieve": "Sieve code goes here"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Issues" : [
                            [
                                "severity": "error",
                                "message": "This is an error message",
                                "from": [
                                    "line" => 0,
                                    "ch" => 0,
                                    "sticky" => null
                                ],
                                "to": [
                                    "line" => 2,
                                    "ch" => 10000,
                                    "sticky" => null
                                ]
                            ]
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /filters/order:
    put:
      tags:
        - Filters
      summary: Update the user's filter priority
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "FilterIDs" : [     // Will amend the order of filters with the order of the corresponding FilterIDs
                          "-Bpgivr5H2qGDRiUQ4-7gm5YLf215MEgZCdzOtLW5psxgB8oNc8OnoFRykab4Z23EGEW1ka3GtQPF9xwx9-VUA==",
                          "pIJGEYyNFsPEb61otAc47_X8eoSeAfMSokny6dmg3jg2JrcdohiRuWSN2i1rgnkEnZmolVx4Np96IcwxJh1WNw==",
                          "l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA=="
                  ]
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  '/filters/{FilterID}':
    put:
      tags:
        - Filters
      summary: Update parameters of a specific filter
      description: |-
        The following parameters can be updated:

        `'Name'     => 'string',
        'Tree'     => 'array',
        'Sieve'    => 'string',
        'Version'  => 'integer'`

        ‘Sieve’ representation always takes precedence over other possible representation like ‘Tree’.
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      // All parameters are optional
                      "Name": "Example",
                      "Sieve": "require [\"fileinto\"]; if address :DOMAIN :is [\"From\", \"Delivered-To\"] \"protonmail.ch\" { fileinto \"mylabel\"; } else { keep; }",
                      "Tree": [
                          {
                              "List": [
                                  "fileinto"
                              ],
                              "Type": "Require"
                          },
                          {
                              "If": {
                                  "Headers": [
                                      "From",
                                      "Delivered-To"
                                  ],
                                  "Keys": [
                                      "protonmail.ch"
                                  ],
                                  "Match": {
                                      "Type": "Is"
                                  },
                                  "Format": {
                                      "Type": "UnicodeCaseMap"
                                  },
                                  "Type": "Address",
                                  "AddressPart": {
                                      "Type": "Domain"
                                  }
                              },
                              "Then": [
                                  {
                                      "Name": "mylabel",
                                      "Type": "FileInto"
                                  }
                              ],
                              "Type": "If",
                              "Else": [
                                  {
                                      "Type": "Keep"
                                  }
                              ]
                          }
                      ],
                      "Version": 1
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Filter": {
                        "ID": "1004",
                        "Name": "Example",
                        "Status": 1,
                        "Priority": 3,
                        "Sieve": "require [\"fileinto\"]; if address :DOMAIN :is [\"From\", \"Delivered-To\"] \"protonmail.ch\" { fileinto \"mylabel\"; } else { keep; }",
                        "Tree": [
                          {
                            "List": [
                              "fileinto"
                            ],
                            "Type": "Require"
                          },
                          {
                            "If": {
                              "Headers": [
                                "From",
                                "Delivered-To"
                              ],
                              "Keys": [
                                "protonmail.ch"
                              ],
                              "Match": {
                                "Type": "Is"
                              },
                              "Format": {
                                "Type": "UnicodeCaseMap"
                              },
                              "Type": "Address",
                              "AddressPart": {
                                "Type": "Domain"
                              }
                            },
                            "Then": [
                              {
                                "Name": "mylabel",
                                "Type": "FileInto"
                              }
                            ],
                            "Type": "If",
                            "Else": [
                              {
                                "Type": "Keep"
                              }
                            ]
                          }
                        ],
                        "Version": 1
                      },
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Filters
      summary: Delete a specific filter
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: FilterID
        in: path
        description: Filter ID
        schema:
          type: string
          example: abcdefghijklm
        required: true
  '/filters/{FilterID}/disable':
    put:
      tags:
        - Filters
      summary: Disable a specific filter
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: FilterID
        in: path
        description: Filter ID
        schema:
          type: string
          example: abcdefghijklm
        required: true
  '/filters/{FilterID}/enable':
    put:
      tags:
        - Filters
      summary: Enable a specific filter
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: FilterID
        in: path
        description: Filter ID
        schema:
          type: string
          example: abcdefghijklm
        required: true
  /import:
    post:
      tags:
        - Import
      summary: Bulk import messages
      description: |-
        Requires `import` authorization scope. Messages must be sent in ascending time
        order so as to build conversations appropriately.

        `AddressID` is mandatory: the message is encrypted before being sent to the server,
        thus the server needs to know which key has been used to encrypt the message.
        All other fields are optional.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
            examples:
              example:
                value: |-
                  --AaB03x
                      Content-Disposition: form-data; name="Metadata"
                      Content-Type: application/json
                  {
                      "0": {
                          "Unread": 0,
                          "IsReplied": 1,
                          "IsRepliedAll": 0,
                          "IsForwarded": 0,
                          "LabelIDs": ["1"],
                          "Type": 0,
                          "AddressID": "{address_id}"
                      }
                  }
                  --AaB03x
                  Content-Disposition: form-data; name="0"; filename="0.eml"
                  Content-Type: message/rfc822

                  From: emersion <emersion@protonmail.com>
                  To: Andy <andy@protonmail.com>
                  Date: Wed, 05 Nov 1984 08:00:00 EST
                  Subject: Hello World!

                  -----BEGIN PGP MESSAGE----- [...] -----END PGP MESSAGE-----
                  --AaB03x--
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1001,
                      "Responses": [
                        {
                          "Name": "0",
                          "Response": {
                            "Code": 1000,
                            "MessageID": "{new_message_id}"
                          }
                        },
                        {
                          "Name": "1",
                          "Response": {
                            "Code": 400,
                            "Error": "Invalid message parent",
                            "Details": {}
                          }
                        }
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
        '413':
          content:
            text/plain:
              examples:
                example:
                  value: Request entity too large (request body too large/too many messages)
          description: '[Payload Too Large](https://tools.ietf.org/html/rfc7231#section-6.5.11)'
        '429':
          headers:
            Retry-After:
              schema:
                type: string
                example: 3600 // In seconds
          description: '[Too Many Requests](https://tools.ietf.org/html/rfc6585#section-4)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /incomingdefaults:
    post:
      tags:
        - Incoming Default
      summary: Create new incoming default
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Email": "test@example.com",
                    "Location": 0
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "IncomingDefault": {
                            "ID": "AJU1NnasUS92Ksh==",
                            "Email": "test@example.com",
                            "Location": 0,
                            "Type": 1, // 0 = automatic, 1 = user
                            "Time": 1461820094
                        },
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Incoming Default
      summary: Delete all contacts
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /incomingdefaults/delete:
    put:
      tags:
        - Incoming Default
      summary: Delete array of incoming defaults
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "IDs": [
                      "gD7tqQFumWuP0P3Jxu_IYoNLsh6CbixlCAnuXbbwnTTUlhTJ5WRDQHk1MnphQQ6IR06W74RxTF-ZSWWjcds8ZA==",
                      "xAUc9Wt2C2TEf7810SHO49BHGxz7xZMBcuBQZpyj9dG-kcevbCMr3rlsjMuUOHXMNQhd_QLeLVy0YKIe-vwUIQ=="
                    ]
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1001,
                      "Responses": [
                        {
                          "ID": "gD7tqQFumWuP0P3Jxu_IYoNLsh6CbixlCAnuXbbwnTTUlhTJ5WRDQHk1MnphQQ6IR06W74RxTF-ZSWWjcds8ZA==",
                          "Response": {
                            "Code": 1000
                          }
                        },
                        {
                          "ID": "xAUc9Wt2C2TEf7810SHO49BHGxz7xZMBcuBQZpyj9dG-kcevbCMr3rlsjMuUOHXMNQhd_QLeLVy0YKIe-vwUIQ==",
                          "Response": {
                            "Code": 1000
                          }
                        }
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  '/incomingdefaults/{incoming_default_id}':
    put:
      tags:
        - Incoming Default
      summary: Update an incoming default
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Location": 0
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "IncomingDefault": {
                            "ID": "lKJlejjlk==",
                            "Email": "test@example.com",
                            "Location": 0,
                            "Type": 1, // 0 = automatic, 1 = user
                            "Time": 1461820292
                        },
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: incoming_default_id
        in: path
        description: the encrypted incoming default id
        schema:
          type: string
          example: lKJlejjlk==
        required: true
  '/incomingdefaults{':
    get:
      tags:
        - Incoming Default
      summary: Get incoming defaults
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "IncomingDefaults": [
                            {
                                "ID": "AJU1NnasUS92Ksh==",
                                "Email": "test@example.com",
                                "Location": 0,
                                "Type": 1, // 0 = automatic, 1 = user
                                "Time": 1461819899
                            }
                        ],
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: Location
        in: query
        description: 'message location 0 => Inbox, 1 => Draft, 2 => Outbox, 3 => Trash, 4 => Spam, 6 => Archive'
        required: false
        schema:
          type: integer
          example: 0
          enum:
            - '0'
            - '1'
            - '2'
            - '3'
            - '4'
            - '6'
      - name: Page
        in: query
        description: the starting page
        required: false
        schema:
          type: integer
          example: 0
          default: 0
      - name: PageSize
        in: query
        description: the page size
        required: false
        schema:
          type: integer
          example: 100
          default: 100
      - name: Keyword
        in: query
        description: the keyword to search on
        required: false
        schema:
          type: string
          example: '@protonmail'
  /invites:
    post:
      tags:
        - Invitation
      summary: Create Invitation
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Email": "notification@email",
                      "Type" : 1 // 1 for mail, 2 for VPN
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /keys:
    get:
      tags:
        - Keys
      summary: Get public keys
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "RecipientType": 1, // 1 is ProtonMail, 2 is external
                        "MIMEType": "text/html", // Content type preferred by recipient, null if external
                        "Keys": [
                            {
                                "Flags": 3, // bitmap: 1 = can be used to verify, 2 = can be used to encrypt
                                "PublicKey": "-----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK-----"
                            },
                            {
                                "Flags": 1,
                                "PublicKey": "-----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK-----"
                            }
                        ],
                        "Warnings" : [] // Array of string warnings about possible issues with address
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Keys
      summary: Create new add
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "AddressID": "xRvCGwFq_TW7i8FtJaGyFEq0g==",
                      "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                      "Primary": 1
                  }
      responses:
        '200':
          $ref: '#/components/responses/AddressKeyOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /keys/private:
    put:
      tags:
        - Keys
      summary: 'Update private keys only, use for mailbox password/single password updates'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ClientEphemeral": "<base64_encoded_ephemeral>",
                      "ClientProof": "<base64_encoded_proof>",
                      "SRPSession": "<hex_encoded_session_id>",
                      "TwoFactorCode": 203941, // if enabled
                      "KeySalt": "<base64_encoded_key_salt>", // RANDOMLY generated client-side
                      "Keys": [ // Includes primary key
                          {
                              "ID": "G1MbEt3Ep5P_EWz8WbHVAOl_6h==",
                              "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----"
                          },
                          {
                              "ID": "adsft3Ep5P_EWz8WbasdkVAOl_6h==",
                              "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----"
                          }
                      ],
                      "OrganizationKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----", // If org admin and can decrypt org key
                      "Auth": { // // include to enable 1 password mode, otherwise 2 password mode
                          "Version" : 4,
                          "ModulusID" : "<encrypted_id>",
                          "Salt" : "<base64_encoded_salt>",
                          "Verifier" : "<base64_encoded_verifier>"
                      }
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /keys/private/upgrade:
    put:
      tags:
        - Keys
      summary: Upgrade private keys with obsolete or incorrect metadata
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "KeySalt": "<base64_encoded_key_salt>", // RANDOMLY generated client-side
                      "Keys": [ // Includes primary key
                          {
                              "ID": "G1MbEt3Ep5P_EWz8WbHVAOl_6h==",
                              "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----"
                          },
                          {
                              "ID": "adsft3Ep5P_EWz8WbasdkVAOl_6h==",
                              "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----"
                          }
                      ],
                      "OrganizationKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----", // If org admin and can decrypt org key
                      "Auth": { // // include to enable 1 password mode, otherwise 2 password mode
                          "Version" : 4,
                          "ModulusID" : "<encrypted_id>",
                          "Salt" : "<base64_encoded_salt>",
                          "Verifier" : "<base64_encoded_verifier>"
                      }
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /keys/reset:
    post:
      tags:
        - Keys
      summary: Install a new key for each address
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |
                  {
                      "Username" : "user_name", // Required if not logged in
                      "Token" : "983c8a169ba7ee02", // Reset token
                      "PrimaryKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                      "KeySalt": "<base64_encoded_key_salt>", // RANDOMLY generated client-side
                      "AddressKeys": [
                          {
                              "AddressID": "xRvCGwFq_TW7i8FtJaGyFEq0g==",
                              "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----"
                          },
                          {
                              "AddressID": "CasdiSFq_TW7i8FtJGuQyFEq0==",
                              "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----"
                          }
                      ],
                      "Auth": { // // include to enable 1 password mode, otherwise 2 password mode
                          "Version" : 4,
                          "ModulusID" : "<encrypted_id>",
                          "Salt" : "<base64_encoded_salt>",
                          "Verifier" : "<base64_encoded_verifier>"
                      }
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - name: x-pm-uid
        in: header
        schema:
          type: string
          example: '{random_user_uid}'
        deprecated: true
        description: Authentication deprecated
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /keys/salts:
    get:
      tags:
        - Keys
      summary: 'Get key salts,'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "KeySalts": [
                            {
                                "KeyID" : "<encrypted_key_id>",
                                "KeySalt" : "<base64_encoded_key_salt>"
                            },
                            {
                                "KeyID" : "<encrypted_key_id>",
                                "KeySalt" : "<base64_encoded_key_salt>"
                            },
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /keys/setup:
    post:
      tags:
        - Keys
      summary: 'Setup keys for new account, private user'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "PrimaryKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                      "KeySalt": "<base64_encoded_key_salt>", // RANDOMLY generated client-side
                      "AddressKeys": [
                          {
                              "AddressID": "xRvCGwFq_TW7i8FtJaGyFEq0g==",
                              "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----"
                          },
                          {
                              "AddressID": "CasdiSFq_TW7i8FtJGuQyFEq0==",
                              "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----"
                          }
                      ],
                      "Auth": { // include to enable 1 password mode, otherwise 2 password mode
                          "Version" : 4,
                          "ModulusID" : "<encrypted_id>",
                          "Salt" : "<base64_encoded_salt>",
                          "Verifier" : "<base64_encoded_verifier>"
                      }
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "User": {
                        "ID": "MJLke8kWh1BBvG95JBIrZvzpgsZ94hNNgjNHVyhXMiv4g9cn6SgvqiIFR5cigpml2LD_iUk_3DkV29oojTt3eA==",
                        "Name": "jason",
                        "UsedSpace": 96691332,
                        "Currency": "USD",
                        "Credit": 0,
                        "MaxSpace": 10737418240,
                        "MaxUpload": 26214400,
                        "Role": 2,
                        "Private": 1,
                        "Subscribed": 1,
                        "Services": 1,
                        "VPN": {
                          "Status": 1,
                          "ExpirationTime": 0,
                          "PlanName": "visionary",
                          "MaxConnect": 10,
                          "MaxTier": 2
                        },
                        "Delinquent": 0,
                        "Keys": [
                          {
                            "ID": "IlnTbqicN-2HfUGIn-ki8bqZfLqNj5ErUB0z24Qx5g-4NvrrIc6GLvEpj2EPfwGDv28aKYVRRrSgEFhR_zhlkA==",
                            "Version": 3,
                            "Flags": 3,
                            "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----*-----END PGP PRIVATE KEY BLOCK-----",
                            "Fingerprint": "c93f767df53b0ca8395cfde90483475164ec6353",
                            "Activation": null,
                            "Primary": 1
                          }
                        ]
                      },
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  '/keys/{keyid}':
    put:
      tags:
        - Keys
      summary: Reactivate ina
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
        - name: keyid
          in: path
          description: the key id
          schema:
            type: string
            example: G1MbEt3Ep5P_EWz8WbHVAOl_6h==
          required: true
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----"
                  }
      responses:
        '200':
          $ref: '#/components/responses/AddressKeyOK'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Keys
      summary: 'Delete key, lo'
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
        - name: keyid
          in: path
          description: the key id
          schema:
            type: string
            example: ACXDmTaBub14w==
          required: true
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  '/keys/{keyid}/activate':
    put:
      tags:
        - Keys
      summary: Activate newly-provisioned member key by sending a key copy encrypted with current mailbox password
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----"
                  }
      responses:
        '200':
          $ref: '#/components/responses/AddressKeyOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: keyid
        in: path
        description: the key id
        schema:
          type: string
          example: G1MbEt3Ep5P_EWz8WbHVAOl_6h==
        required: true
  '/keys/{keyid}/flags':
    put:
      tags:
        - Keys
      summary: Update key fla
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Flags": 1
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: keyid
        in: path
        description: the key id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  '/keys/{keyid}/primary':
    put:
      tags:
        - Keys
      summary: Make address k
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: keyid
        in: path
        description: the key id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  /labels:
    get:
      tags:
        - Label
      summary: Get user's labels
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
        - name: Type
          in: query
          description: 'Type 1 => Message Labels (default), 2 => Contact Groups'
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          headers:
            Authorization:
              schema:
                type: string
                example: 'Bearer {this_is_test_access_token}'
            x-pm-uid:
              schema:
                type: string
                example: '{random_user_uid}'
            x-pm-appversion:
              schema:
                type: string
                example: '{app_version} or Other'
            x-pm-apiversion:
              schema:
                type: string
                example: '1'
            Accept:
              schema:
                type: string
                example: application/vnd.protonmail.v1+json
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Labels": [
                            {
                                "ID": "4v-mQLz2NnvtXP0EI3fFSTcSUoZWZ3xgC1Z-Ngg6M2v5nDqV4vGANE33IdHjvyV6_19E9jdhTQA-ndSj2Hi4cQ==",
                                "Name": "New",
                                "Color": "#f66",
                                "Display": 0,
                                "Type": 1,
                                "Exclusive": 0,
                                "Notify": 0,
                                "Order": 1
                            },
                            {
                                "ID": "3pf-EZUUjPtbBvBREF0TOxA4Cq6lYozP7fyUhCa0NnU3Im_QCoihoHN1vJKFWd7_hOx1lR35tAG3C8NjPr70RQ==",
                                "Name": "test3",
                                "Color": "#f66",
                                "Display": 0,
                                "Type": 1,
                                "Exclusive": 0,
                                "Notify": 0,
                                "Order": 2
                            }
                        ]
                        // return all of user's labels info
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Label
      summary: Create new label
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Name" : "Red Label",       // required, cannot be same as an existing label of this Type
                      "Color" : "#f66",           // required, must match default colors
                      "Display" : 0,              // required, 0 = show the label in the sidebar, 1 = hide label from sidebar
                      "Type" : 1,                 // required, 1 => Message Labels (default), 2 => Contact Groups
                      "Exclusive": 0,             // required, 0 => inclusive (label), 1 => exclusive (folder), message type only
                      "Notify": 0                 // required, 0 => no desktop/email notifications, 1 => notifications, message type only
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 14002,
                      "Error": "Invalid name",
                      "Details": {}
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /labels/order:
    put:
      tags:
        - Label
      summary: Change label priority
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "LabelIDs" : [     // Will amend the order of labels with the order of the corresponding LabelIDs
                          "-Bpgivr5H2qGDRiUQ4-7gm5YLf215MEgZCdzOtLW5psxgB8oNc8OnoFRykab4Z23EGEW1ka3GtQPF9xwx9-VUA==",
                          "pIJGEYyNFsPEb61otAc47_X8eoSeAfMSokny6dmg3jg2JrcdohiRuWSN2i1rgnkEnZmolVx4Np96IcwxJh1WNw==",
                          "l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA=="
                      ],
                      "Type" : 1      // optional, 1 => Message Labels (default), 2 => Contact Groups
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  '/labels/{label_id}':
    put:
      tags:
        - Label
      summary: Update existing label
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Name": "Stuff",
                    "Color": "#ff9",
                    "Display": 0,
                    "Notify": 0
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Label": {
                        "ID": "jBik4gTUekQoequC1A==",
                        "Name": "Stuff",
                        "Color": "#ff9",
                        "Display": 0,
                        "Type": 1,
                        "Exclusive": 0,
                        "Notify": 0,
                        "Order": 18
                      }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Label
      summary: Delete a label
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: label_id
        in: path
        description: the encrypted label id
        schema:
          type: string
          example: lKJlejjlk==
        required: true
  /logs/auth:
    get:
      tags:
        - Logs
      summary: Get authentication logs
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Logs": [
                            {
                                "Time": 1434654933,
                                "Event": 0, // 0 = login password failure, 1 = login success, 2 = logout, 3 = 2FA login failure
                                "IP": "192.168.0.1"
                            },
                            {
                                "Time": 1434654930,
                                "Event": 0,
                                "IP": "192.168.0.1"
                            },
                            {
                                "Time": 1434654925,
                                "Event": 0,
                                "IP": "192.168.0.1"
                            }
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Logs
      summary: Delete all authentication logs
      responses:
        '200':
          headers:
            Authorization:
              schema:
                type: string
                example: 'Bearer {this_is_test_access_token}'
            x-pm-uid:
              schema:
                type: string
                example: '{random_user_uid}'
            x-pm-appversion:
              schema:
                type: string
                example: '{app_version} or Other'
            x-pm-apiversion:
              schema:
                type: string
                example: '1'
            Accept:
              schema:
                type: string
                example: application/vnd.protonmail.v1+json
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /members:
    get:
      tags:
        - Members
      summary: Get all members of user's organization
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Members": [
                        {
                          "ID": "xRvCGwFq_TW7i8FtJaGyFEq0g==",
                          "Role": 2,
                          "Private": 1,
                          "Type": 0,
                          "MaxSpace": 100000000,
                          "MaxVPN": 0,
                          "Name": "Jason",
                          "UsedSpace": 81780955,
                          "Self": 1,
                          "Subscriber": 1,
                          "Keys": [],
                          "PublicKey": "-----BEGIN PUBLIC KEY BLOCK-----.*-----END PUBLIC KEY BLOCK-----"
                        },
                        {
                          "ID": "dRs2Vv64Vru392SbvvG1MbEt3Ep5P==",
                          "Role": 1,
                          "Private": 0,
                          "Type": 1,
                          "MaxSpace": 0,
                          "MaxVPN": 0,
                          "Name": "Bart",
                          "UsedSpace": 0,
                          "Self": 0,
                          "Subscriber": 0,
                          "Keys": [],
                          "PublicKey": null
                        }
                      ],
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Members
      summary: Create new Mem
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Name": "Jason",
                      "Private": 0,
                      "MaxSpace": 1073741824,
                      "MaxVPN" : 0,
                      "Auth": {
                          "Version" : 4,
                          "ModulusID" : "<encrypted_id>",
                          "Salt" : "<base64_encoded_salt>",
                          "Verifier" : "<base64_encoded_verifier>"
                      }
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Member": {
                        "ID": "44j9R3b8kckYBHvp84U==",
                        "Role": 1,
                        "Private": 0,
                        "Type": 1,
                        "MaxSpace": 1073741824,
                        "MaxVPN": 0,
                        "Name": "Jason",
                        "UsedSpace": 0,
                        "Self": 0,
                        "Subscriber": 0,
                        "Keys": [],
                        "PublicKey": null
                      },
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /members/auth:
    post:
      tags:
        - Members
      summary: 'Login as non-private member, password route'
      requestBody:
        $ref: '#/components/requestBodies/LoginData1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "ServerProof": <base64_encoded_proof>
                        "UID": "f3804b2ad70c3992a9496ff07f3e9b93",
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  '/members/{memberid}':
    get:
      tags:
        - Members
      summary: Get member
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Member": {
                            "ID": "xRvCGwFq_TW7i8FtJaGyFEq0g==",
                            "Role": 2, // 2 for owner, 1 for member
                            "Private": 1, // 1 for private user, admins cannot read mail
                            "Type": 0, // 0 for PM user, 1 for non-PM
                            "MaxSpace": 100000000,
                            "MaxVPN" : 0,
                            "Name": "Jason",
                            "UsedSpace": 81780955,
                            "Type": 0,
                            "Self": 1,
                            "Subscriber": 1,
                            "Keys" : [],
                            "PublicKey": "-----BEGIN PUBLIC KEY BLOCK-----.*-----END PUBLIC KEY BLOCK-----"
                        },
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Members
      summary: 'Remove member,'
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: memberid
        in: path
        description: the member id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  '/members/{memberid}/addresses':
    get:
      tags:
        - Members
      summary: Get addresses of a member
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Addresses": [
                            {
                                "ID": "qmhrlFY24BhSHiFplF0B7G_cMVLi1sokaWIhfNaee6dRtdIZPYnqgI4-MpAb8h3JhOOykKv8ZsuTH8X_SrUZSg==",
                                "DomainID": "l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA==",
                                "Email": "jason@custom.dev",
                                "Send": 1,
                                "Receive": 1,
                                "Status": 1,
                                "Type": 1,
                                "DisplayName": "D L'u, P.D. 定超",
                                "Signature": "hi there",
                                "HasKeys": 1,
                                "Keys": [
                                    {
                                        "ID": "G1MbEt3Ep5P_EWz8WbHVAOl_6h==",
                                        "Version": 3,
                                        "PublicKey": "-----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK-----",
                                        "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----", // This is the member key
                                        "Token": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                                        "Fingerprint": "c93f767df53b0ca8395cfde90483475164ec6353",
                                        "Activation": null,
                                        "Primary": 1
                                    }
                                ]
                            }
                        ],
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: memberid
        in: path
        description: the member id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
      - name: Page
        in: query
        description: the page index
        required: false
        schema:
          type: integer
          example: 0
          default: 0
      - name: PageSize
        in: query
        description: 'the page size, maximum 150'
        required: false
        schema:
          type: integer
          example: 150
          default: 150
  '/members/{memberid}/keys':
    post:
      tags:
        - Member Keys
      summary: Create new mem
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Activation": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                      "AddressID": "xRvCGwFq_TW7i8FtJaGyFEq0g==",
                      "UserKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                      "MemberKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                      "Token": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                      "Primary": 1
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "MemberKey": {
                            "ID": "G1MbEt3Ep5P_EWz8WbHVAOl_6h==",
                            "Version": 3,
                            "PublicKey": "-----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK-----",
                            "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----", // This is the member key
                            "Token": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                            "Fingerprint": "c93f767df53b0ca8395cfde90483475164ec6353",
                            "Activation": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                            "Primary": 1,
                            "Flags": 3
                        },
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: memberid
        in: path
        description: the member id
        schema:
          type: string
          example: DFSXmTadD14w==
        required: true
  '/members/{memberid}/keys/setup':
    post:
      tags:
        - Member Keys
      summary: Setup new memb
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "KeySalt": "akYwFq_TW7i8FtJaGyFEq0g==",
                      "PrimaryKey": {
                          "UserKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                          "MemberKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                          "Token": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----"
                  },
                      "AddressKeys": [
                          {
                              "AddressID": "xRvCGwFq_TW7i8FtJaGyFEq0g==",
                              "UserKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                              "MemberKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                              "Token": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----"
                          }
                      ],
                      "Auth": { // include to enable 1 password mode, otherwise 2 password mode
                          "Version" : 4,
                          "ModulusID" : "<encrypted_id>",
                          "Salt" : "<base64_encoded_salt>",
                          "Verifier" : "<base64_encoded_verifier>"
                      }
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Member": {
                            "ID": "xRvCGwFq_TW7i8FtJaGyFEq0g==",
                            "Role": 2, // 2 for owner, 1 for member
                            "Private": 1, // 1 for private user, admins cannot read mail
                            "Type": 0, // 0 for PM user, 1 for non-PM
                            "MaxSpace": 100000000,
                            "Name": "Jason",
                            "UsedSpace": 81780955,
                            "Keys": [
                                {
                                    "ID": "adsfgt3Ep5P_EWz8WbHVAOl_6h==",
                                    "Version": 3,
                                    "PublicKey": "-----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK-----",
                                    "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----", // This is the member key
                                    "Token": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                                    "Fingerprint": "c93f767df53b0ca8395cfde90483475164ec6353",
                                    "Activation": null,
                                    "Primary": 1,
                                    "Flags": 3
                                }
                            ]
                        },
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: memberid
        in: path
        description: the member id
        schema:
          type: string
          example: DFSXmTadD14w==
        required: true
  '/members/{memberid}/keys/{keyid}':
    put:
      tags:
        - Member Keys
      summary: Update member
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |
                  {
                      "KeySalt": "akYwFq_TW7i8FtJaGyFEq0g==",
                      "UserKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                      "MemberKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                      "Token": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                      "Auth": { // include if updating primary key to enable 1 password mode, otherwise 2 password mode
                          "Version" : 4,
                          "ModulusID" : "<encrypted_id>",
                          "Salt" : "<base64_encoded_salt>",
                          "Verifier" : "<base64_encoded_verifier>"
                      }
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "MemberKey": {
                            "ID": "G1MbEt3Ep5P_EWz8WbHVAOl_6h==",
                            "PublicKey": "-----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK-----",
                            "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----", // This is the member key
                            "Token": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                            "Fingerprint": "c93f767df53b0ca8395cfde90483475164ec6353",
                            "Activation": null,
                            "Primary": 1
                        },
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Member Keys
      summary: Delete member
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: memberid
        in: path
        description: the member id
        schema:
          type: string
          example: DFSXmTadD14w==
        required: true
      - name: keyid
        in: path
        description: the key id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  '/members/{memberid}/keys/{keyid}/primary':
    put:
      tags:
        - Member Keys
      summary: Make address m
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: memberid
        in: path
        description: the member id
        schema:
          type: string
          example: DFSXmTadD14w==
        required: true
      - name: keyid
        in: path
        description: the key id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  '/members/{memberid}/name':
    put:
      tags:
        - Members
      summary: Update member
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Name": "Jason"
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: memberid
        in: path
        description: the member id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  '/members/{memberid}/password':
    put:
      tags:
        - Members
      summary: Update Login P
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Auth": {
                          "Version" : 4,
                          "ModulusID" : "<encrypted_id>",
                          "Salt" : "<base64_encoded_salt>",
                          "Verifier" : "<base64_encoded_verifier>"
                      }
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: memberid
        in: path
        description: the member id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  '/members/{memberid}/privatize':
    put:
      tags:
        - Members
      summary: Make account p
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: memberid
        in: path
        description: the member id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  '/members/{memberid}/quota':
    put:
      tags:
        - Members
      summary: Update disk sp
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "MaxSpace": 9900000000
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: memberid
        in: path
        description: the member id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  '/members/{memberid}/role':
    put:
      tags:
        - Members
      summary: 'Update role, l'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Role": 2 // 1 = Member, 2 = Owner
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: memberid
        in: path
        description: the member id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  '/members/{memberid}/vpn':
    put:
      tags:
        - Members
      summary: Update number
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "MaxVPN": 2
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: memberid
        in: path
        description: the member id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  /messages:
    get:
      tags:
        - Messages
      summary: Get a list of message metadata
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
        - name: Location
          in: query
          description: 'message location 0 => Inbox, 1 => Draft, 2 => Outbox, 3 => Trash, 4 => Spam, 6 => Archive'
          required: false
          schema:
            type: integer
            example: 0
            enum:
              - '0'
              - '1'
              - '2'
              - '3'
              - '4'
              - '6'
        - name: Page
          in: query
          description: the page index
          required: false
          schema:
            type: integer
            example: 0
            default: 0
        - name: PageSize
          in: query
          description: 'the page size, maximum 150'
          required: false
          schema:
            type: integer
            example: 50
            default: 50
        - name: Limit
          in: query
          description: 'the number of messages to return, defaults to page size (1 page), maximum 150'
          required: false
          schema:
            type: integer
            default: 50
        - name: LabelID
          in: query
          description: label to filter on
          required: false
          schema:
            type: string
            example: <encrypted_label_id>
        - name: Sort
          in: query
          description: order key name
          required: false
          schema:
            type: string
            example: Time
            default: Time
            enum:
              - To
              - From
              - Subject
              - Size
              - Time
              - ID
        - name: Desc
          in: query
          description: '0 => ASC, 1 => DESC'
          required: false
          schema:
            type: integer
            example: 1
            default: 1
            enum:
              - '0'
              - '1'
        - name: Begin
          in: query
          description: UNIX timestamp to filter messages earlier than timestamp
          required: false
          schema:
            type: integer
            example: 1433807257
        - name: End
          in: query
          description: UNIX timestamp to filter messages later than timestamp
          required: false
          schema:
            type: integer
            example: 1433807257
        - name: BeginID
          in: query
          description: 'return only messages newer, in creation time (NOT timestamp), than BeginID'
          required: false
          schema:
            type: string
            example: <encrypted_message_id>
        - name: EndID
          in: query
          description: 'return only messages older, in creation time (NOT timestamp), than EndID'
          required: false
          schema:
            type: string
            example: <encrypted_message_id>
        - name: Keyword
          in: query
          description: 'Keyword search of To, CC, BCC, From, Subject'
          required: false
          schema:
            type: string
            example: cheese
        - name: To
          in: query
          description: 'Keyword search of To, CC, BCC'
          required: false
          schema:
            type: string
            example: cheese
        - name: From
          in: query
          description: Keyword search of From
          required: false
          schema:
            type: string
            example: cheese
        - name: Subject
          in: query
          description: Keyword search of Subject
          required: false
          schema:
            type: string
            example: cheese
        - name: Attachments
          in: query
          description: '0 => only no attachments, 1 => only has attachment(s)'
          required: false
          schema:
            type: integer
            example: 1
            enum:
              - '0'
              - '1'
        - name: Starred
          in: query
          description: '0 => only unstarred, 1 => only starred'
          required: false
          schema:
            type: integer
            example: 1
            enum:
              - '0'
              - '1'
        - name: Unread
          in: query
          description: '0 => only read, 1 => only unread'
          required: false
          schema:
            type: integer
            example: 1
            enum:
              - '0'
              - '1'
        - name: ConversationID
          in: query
          description: conversation to filter on
          required: false
          schema:
            type: string
            example: <encrypted_conv_id>
        - name: AddressID
          in: query
          description: address to filter on
          required: false
          schema:
            type: string
            example: <encrypted_address_id>
        - name: ID
          in: query
          description: message ID(s) to filter on
          required: false
          schema:
            oneOf:
              - type: string
                example: <encrypted_message_id>
              - type: array
        - name: ExternalID
          in: query
          description: MIME message-id to filter on
          required: false
          schema:
            type: string
            example: 55C131A5.2040501@gmail.com
        - name: AutoWildcard
          in: query
          description: 'automatically convert simple queries to wildcarded versions, such as `test` to `*test*`'
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Total":3,
                        "Messages":[
                            {
                                "ID":"ASnfew8asds92SDnsakr==",
                                "Order": 367,
                                "Subject":"Hi",
                                "Unread":0,
                                "Type": 0, // 0 = INBOX, 1 = DRAFT, 2 = SENT, 3 = INBOX_AND_SENT
                                "Sender": {
                                    "Address":"jason@protonmail.dev",
                                    "Name":"\u79d1\u6280\u798f\u5e03\u65af\u4e2d\u6587\u7f51"
                                },
                                "ToList":[
                                    {
                                        "Address":"bart.c.butler@gmail.com",
                                        "Name":"Bart",
                                        "Group": "" // Group name if present and sent/draft
                                    }
                                ],
                                "Time":1433627902,
                                "Size":54,
                                "Location":1, // Deprecated, use LabelIDs instead
                                "Starred":0, // Deprecated, use LabelIDs instead
                                "HasAttachment":0, // Deprecated, use NumAttachments instead
                                "NumAttachments":0,
                                "IsEncrypted":5,
                                "ExpirationTime":0,
                                "IsReplied":0,
                                "IsRepliedAll":0,
                                "IsForwarded":0,
                                "AddressID":"254",
                                "CCList":[

                                ],
                                "BCCList":[

                                ],
                                "LabelIDs":[
                                    "1"
                                ],
                                "ExternalID": null
                            },
                            {
                                "ID":"ASdkjASlfsnnxcvJsdfI==",
                                "Order": 3124,
                                "Subject":"Hi",
                                "Unread":0,
                                "Type": 0, // 0 = INBOX, 1 = DRAFT, 2 = SENT, 3 = INBOX_AND_SENT
                                "Sender": {
                                    "Address":"jason@protonmail.dev",
                                    "Name":"\u79d1\u6280\u798f\u5e03\u65af\u4e2d\u6587\u7f51"
                                },
                                "ToList":[
                                    {
                                        "Address":"bart.c.butler@gmail.com",
                                        "Name":"Bart"
                                        "Group": "" // Group name if present and sent/draft
                                    }
                                ],
                                "Time":1433627227,
                                "Size":54,
                                "Location":1, // Deprecated, use LabelIDs instead
                                "Starred":0, // Deprecated, use LabelIDs instead
                                "HasAttachment":0, // Deprecated, use NumAttachments instead
                                "NumAttachments":0,
                                "IsEncrypted":5,
                                "ExpirationTime":0,
                                "IsReplied":0,
                                "IsRepliedAll":0,
                                "IsForwarded":0,
                                "AddressID":"254",
                                "CCList":[

                                ],
                                "BCCList":[

                                ],
                                "LabelIDs":[
                                    "1",
                                    "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w=="
                                ],
                                "ExternalID": "pr0n@gmail.com"
                            },
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Messages
      summary: Create a new draft message
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |
                  {
                      "Message": {
                          "ToList":[
                              {
                                  "Name":"Feng",
                                  "Address":"zhj4478@protonmail.xyz",
                                  "Group": "MyGroup"
                              },
                              {
                                  "Name":"Andy",
                                  "Address":"andy@protonmail.xyz",
                                  "Group": "MyGroup"
                              }
                          ],
                          "CCList":[
                              {
                                  "Name":"DCL",
                                  "Address":"dcl@protonmail.xyz",
                                  "Group": ""
                              }
                          ],
                          "BCCList":[
                              {
                                  "Name":"Jason",
                                  "Address":"jason@protonmail.xyz",
                                  "Group": ""
                              }
                          ],
                          "Subject":"new subject",
                          "Body":"-----BEGIN PGP MESSAGE----- Version: OpenPGP.js v0.11.0-PM wcBMAygXAAfPdsIGAQf+PBP+Fk0B4+FMdtzKu2iDmv/3JzI4lJLHC9bgyAJH=FH -----END PGP MESSAGE-----",
                          "Sender": {
                              "Name": "Me",
                              "Address": "me@protonmail.com"
                          },
                          "ExternalID": "ABC.123.ABC@protonmail.com" // Optional, for external clients which insist on their own IDs
                      },
                      "ParentID": "ollqGCKrny8ciPKA6_egOTiJitX8Wpmw==", // Optional, ID of parent address for reply/reply all/forward
                      "Action": 0, // Optional, reply = 0, reply all = 1, forward = 2
                      "AttachmentKeyPackets" : { // list of attachments to include from parent with corresponding key packets
                          "attachment_id" : "<base64_encoded_key_packet>"
                      }
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Message":{
                            "ID":"KPlISx5MiML3XcSYPrREF-Jw9AFa2kk60Lqw7FVWAGvJUsT_zzWKFI-adgMIhFhPaAukDm9fw3MAOfsds-tfNw==",
                            "Order": 456,
                            "Subject":"new subject",
                            "Unread":1,
                            "Type": 1, // 0 = INBOX, 1 = DRAFT, 2 = SENT, 3 = INBOX_AND_SENT
                            "Sender": {
                                "Address":"me@protonmail.com",
                                "Name":"Me"
                            },
                            "ReplyTo": {
                                "Address":"me@protonmail.com",
                                "Name":"Me"
                            },
                            "ReplyTos": [
                                {
                                    "Address":"me@protonmail.com",
                                    "Name":"Me"
                                }
                            ],
                            "ToList":[
                                {
                                    "Address":"zhj4478@protonmail.xyz",
                                    "Name":"Feng",
                                    "Group": "MyGroup"
                                },
                                {
                                    "Address":"andy@protonmail.xyz",
                                    "Name":"Andy",
                                    "Group": "MyGroup"
                                }
                            ],
                            "Time":1433890289,
                            "Size":148,
                            "Location":1, // Deprecated, use LabelIDs instead
                            "Starred":0, // Deprecated, use LabelIDs instead
                            "IsEncrypted":1,
                            "ExpirationTime":0,
                            "IsReplied":0,
                            "IsRepliedAll":0,
                            "IsForwarded":0,
                            "SpamScore": 0,
                            "AddressID":"cO6RgDJwoHFScLqIkVnRD9luDVkh20EDto1aIHVHU43-dJlREzFcUjS-c7bB-_qlnxBgwAShddHZ4UDdu6RswQ==",
                            "Body":"-----BEGIN PGP MESSAGE----- Version: OpenPGP.js v0.11.0-PM wcBMAygXAAfPdsIGAQf+PBP+Fk0B4+FMdtzKu2iDmv\/3JzI4lJLHC9bgyAJH=FH -----END PGP MESSAGE-----",
                            "CCList":[
                                {
                                    "Address":"dcl@protonmail.xyz",
                                    "Name":"DCL",
                                    "Group": ""
                                }
                            ],
                            "BCCList":[
                                {
                                    "Address":"jason@protonmail.xyz",
                                    "Name":"Jason",
                                    "Group": ""
                                }
                            ],
                            "Header":"(No Header)",
                            "Attachments":[

                            ],
                            "LabelIDs":[
                                "1"
                            ],
                            "ExternalID": null
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /messages/count:
    get:
      tags:
        - Messages
      summary: Get grouped message count
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Counts": [
                        {
                          "LabelID": "0",
                          "Total": 15,
                          "Unread": 6
                        },
                        {
                          "LabelID": "1",
                          "Total": 62,
                          "Unread": 32
                        },
                        {
                          "LabelID": "2",
                          "Total": 10,
                          "Unread": 1
                        }
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: AddressID
        in: query
        description: address to filter on
        required: false
        schema:
          type: string
          example: <encrypted_address_id>
  /messages/delete:
    put:
      tags:
        - Messages
      summary: Delete an array of messages
      requestBody:
        $ref: '#/components/requestBodies/ArrayOfIds'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /messages/empty:
    delete:
      tags:
        - Messages
      summary: Delete all messages with a label/folder
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: LabelID
        in: query
        description: 'the label ID, limited to drafts/spam/trash/custom labels/custom folders'
        schema:
          type: string
          example: '1'
      - name: AddressID
        in: query
        description: address to filter on
        required: false
        schema:
          type: string
          example: <encrypted_address_id>
  /messages/label:
    put:
      tags:
        - Messages
      summary: Label/move an array of messages
      requestBody:
        $ref: '#/components/requestBodies/LabelArrayOfIds'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /messages/read:
    put:
      tags:
        - Messages
      summary: Mark an array of messages as read
      requestBody:
        $ref: '#/components/requestBodies/ArrayOfIds'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /messages/undelete:
    put:
      tags:
        - Messages
      summary: Undelete an array of messages
      requestBody:
        $ref: '#/components/requestBodies/ArrayOfIds'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /messages/unlabel:
    put:
      tags:
        - Messages
      summary: Unlabel an array of messages
      requestBody:
        $ref: '#/components/requestBodies/LabelArrayOfIds'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /messages/unread:
    put:
      tags:
        - Messages
      summary: Mark an array of messages as unread
      requestBody:
        $ref: '#/components/requestBodies/ArrayOfIds'
      responses:
        '200':
          $ref: '#/components/responses/MessageOperationOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  '/messages/{messageID}':
    put:
      tags:
        - Messages
      summary: Update a draft message
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
        - name: messageID
          in: path
          description: the encrypted message id
          schema:
            type: string
            example: LDJLSKJlkj==
          required: true
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |
                  {
                          "Message": {
                              "ToList":[
                                  {
                                      "Name":"Feng",
                                      "Address":"zhj4478@protonmail.xyz",
                                      "Group": "MyGroup"
                                  },
                                  {
                                      "Name":"Andy",
                                      "Address":"andy@protonmail.xyz",
                                      "Group": "MyGroup"
                                  }
                              ],
                              "CCList":[
                                  {
                                      "Name":"DCL",
                                      "Address":"dcl@protonmail.xyz",
                                      "Group": ""
                                  }
                              ],
                              "BCCList":[
                                  {
                                      "Name":"Jason",
                                      "Address":"jason@protonmail.xyz",
                                      "Group": ""
                                  }
                              ],
                              "Subject":"new subject",
                              "Body":"-----BEGIN PGP MESSAGE----- Version: OpenPGP.js v0.11.0-PM wcBMAygXAAfPdsIGAQf+PBP+Fk0B4+FMdtzKu2iDmv/3JzI4lJLHC9bgyAJH=FH -----END PGP MESSAGE-----",
                              "Sender": {
                                  "Name": "Me",
                                  "Address": "me@protonmail.com"
                              },
                              "ExternalID": "ABC.123.ABC@protonmail.com", // Optional, for external clients which insist on their own IDs
                              "AttachmentKeyPackets" : { // optional unless changing sender addres, complete list of new attachment key packets
                                  "attachment_id" : "<base64_encoded_key_packet>"
                              }
                          }
                      }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Message":{
                            "ID":"KPlISx5MiML3XcSYPrREF-Jw9AFa2kk60Lqw7FVWAGvJUsT_zzWKFI-adgMIhFhPaAukDm9fw3MAOfsds-tfNw==",
                            "Order": 323,
                            "Subject":"new subject",
                            "Unread":1,
                            "Type": 1, // 0 = INBOX, 1 = DRAFT, 2 = SENT, 3 = INBOX_AND_SENT
                            "Sender": {
                                "Address":"me@protonmail.com",
                                "Name":"Me"
                            },
                            "ReplyTo": {
                                "Address":"me@protonmail.com",
                                "Name":"Me"
                            },
                            "ReplyTos": [
                                {
                                    "Address":"me@protonmail.com",
                                    "Name":"Me"
                                }
                            ],
                            "ToList":[
                                {
                                    "Address":"zhj4478@protonmail.xyz",
                                    "Name":"Feng",
                                    "Group": "MyGroup"
                                },
                                {
                                    "Address":"andy@protonmail.xyz",
                                    "Name":"Andy",
                                    "Group": "MyGroup"
                                }
                            ],
                            "Time":1433890289,
                            "Size":148,
                            "Location":1, // Deprecated, use LabelIDs instead
                            "Starred":0, // Deprecated, use LabelIDs instead
                            "IsEncrypted":1,
                            "ExpirationTime":0,
                            "IsReplied":0,
                            "IsRepliedAll":0,
                            "IsForwarded":0,
                            "SpamScore": 0,
                            "AddressID":"cO6RgDJwoHFScLqIkVnRD9luDVkh20EDto1aIHVHU43-dJlREzFcUjS-c7bB-_qlnxBgwAShddHZ4UDdu6RswQ==",
                            "Body":"-----BEGIN PGP MESSAGE----- Version: OpenPGP.js v0.11.0-PM wcBMAygXAAfPdsIGAQf+PBP+Fk0B4+FMdtzKu2iDmv\/3JzI4lJLHC9bgyAJH=FH -----END PGP MESSAGE-----",
                            "CCList":[
                                {
                                    "Address":"dcl@protonmail.xyz",
                                    "Name":"DCL",
                                    "Group": ""
                                }
                            ],
                            "BCCList":[
                                {
                                    "Address":"jason@protonmail.xyz",
                                    "Name":"Jason",
                                    "Group": ""
                                }
                            ],
                            "Header":"(No Header)",
                            "Attachments":[

                            ],
                            "LabelIDs":[
                                "1"
                            ],
                            "ExternalID": null
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Messages
      summary: Send a message
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
        - name: messageID
          in: path
          description: ID of existing draft
          schema:
            type: string
            example: I6hgx3Ol==
          required: true
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ExpirationTime": 1488351927, // Unix timestamp of expiration of message. 0 for no expiration
                      "AutoSaveContacts": 0, // Optionally override the global AutoSaveContact setting for this message
                      "Packages" : [
                          {
                              "Addresses": {
                                  "bartqa@localhost" : {
                                      "Type" : 1, // ProtonMail internal
                                      "BodyKeyPacket" : "<base64_encoded_key_packet>",
                                      "AttachmentKeyPackets" : { // optional if no attachments
                                          "attachment_id" : "<base64_encoded_key_packet>"
                                      },
                                      "Signature" : 0 // 1 = attachment signatures
                                  },
                                  "bartqa@gmail.com" : {
                                      "Type" : 2, // EO
                                      "BodyKeyPacket" : "<base64_encoded_key_packet>",
                                      "AttachmentKeyPackets" : { // optional if no attachments
                                          "attachment_id" : "<base64_encoded_key_packet>"
                                      },
                                      "Token" : "<random_token>",
                                      "EncToken" : "<encrypted_random_token>",
                                      "Auth": {
                                          "Version" : 4,
                                          "ModulusID" : "<encrypted_id>",
                                          "Salt" : "<base64_encoded_salt>",
                                          "Verifier" : "<base64_encoded_verifier>"
                                      },
                                      "PasswordHint" : "Example hint", // optional
                                      "Signature" : 0 // 1 = attachment signatures
                                  },
                                  "random@gmail.com" : {
                                      "Type" : 4, // Cleartext inline
                                      "Signature" : 0 // 1 = signatures
                                  },
                                  "bartqa2@gmail.com" : {
                                      "Type" : 8, // Inline PGP
                                      "BodyKeyPacket" : "<base64_encoded_key_packet>",
                                      "AttachmentKeyPackets" : { // optional if no attachments
                                          "attachment_id" : "<base64_encoded_key_packet>"
                                      },
                                      "Signature" : 0 // 1 = attachment signatures
                                  }
                              },
                              "Type": 15, // 8|4|2|1, all types sharing this package, a bitmask
                              "Body": "<base64_encoded_openpgp_encrypted_data_packet>",
                              "MIMEType" : "text/html",
                              "BodyKey": { // Include only if cleartext recipients
                                  "Key": "<base64_encoded_session_key>",
                                  "Algorithm": "aes256" // algorithm corresponding to session key
                              },
                              "AttachmentKeys": {  // Only include if cleartext recipients, optional if no attachments
                                  "attachment_id" : {
                                      "Key": "<base64_encoded_session_key>",
                                      "Algorithm": "aes256" // algorithm corresponding to session key
                                  }
                  }
                          },
                          {
                              "Addresses": {
                                  "bartqa2@pgp.me" : {
                                      "Type" : 16, // PGP/MIME
                                      "BodyKeyPacket" : "<base64_encoded_key_packet>"
                                  },
                                  "bartqa3@gmail.com" : {
                                      "Type" : 32, // cleartext MIME
                                      "Signature" : 0 // 1 = signature
                                  }
                              },
                              "Type": 48, // 16|32 MIME sending cannot share packages with inline sending
                              "Body": "<base64_encoded_openpgp_encrypted_data_packet>",
                              "MIMEType" : "multipart/mixed", // Always for MIME,
                              "BodyKey": { // Include only if cleartext MIME recipients
                                  "Key": "<base64_encoded_session_key>",
                                  "Algorithm": "aes256" // algorithm corresponding to session key
                              }
                          }
                      ]
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Sent":{
                            "ID":"I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w==",
                            "Order": 362,
                            "Subject":"Fw: Hi",
                            "Unread":0,
                            "Type": 2, // 0 = INBOX, 1 = DRAFT, 2 = SENT, 3 = INBOX_AND_SENT
                            "Sender": {
                                "Address":"jason@protonmail.dev",
                                "Name":"\u79d1\u6280\u798f\u5e03\u65af\u4e2d\u6587\u7f51"
                            },
                            "ReplyTo": {
                                "Address":"jason@protonmail.dev",
                                "Name":"\u79d1\u6280\u798f\u5e03\u65af\u4e2d\u6587\u7f51"
                            },
                            "ReplyTos": [
                                {
                                    "Address":"jason@protonmail.dev",
                                    "Name":"\u79d1\u6280\u798f\u5e03\u65af\u4e2d\u6587\u7f51"
                                },
                                {
                                    "Address": "example@example.com",
                                    "Name": "Example McExample"
                                }
                            ],
                            "ToList":[
                                {
                                    "Address":"bart.c.butler@gmail.com",
                                    "Name":"Bart",
                                    "Group": "" // Group name if present and sent/draft
                                },
                                {
                                    "Address":"bartqa@localhost",
                                    "Name":"Bart",
                                    "Group": "" // Group name if present and sent/draft
                                }
                            ],
                            "Time":1433889144,
                            "Size":54,
                            "Location":2, // Deprecated, use LabelIDs instead
                            "Starred":0, // Deprecated, use LabelIDs instead
                            "IsEncrypted":4,
                            "ExpirationTime":0,
                            "IsReplied":0,
                            "IsRepliedAll":0,
                            "IsForwarded":0,
                            "SpamScore": 0,
                            "AddressID":"254",
                            "Body":"-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                            "CCList":[

                            ],
                            "BCCList":[

                            ],
                            "Header":"(No Header)",
                            "Attachments":[

                            ],
                            "LabelIDs":[
                                "2"
                            ],
                            "ExternalID": null
                        },
                        "Parent":{  // Present only if the sent message has a parent (reply/reply all/forward)
                            "ID":"IasdfDAfl-d3HYa3E394T_ACXDmTaBub14w==",
                            "IsReplied":0,
                            "IsRepliedAll":0,
                            "IsForwarded":1
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  '/messages/{messageid}':
    get:
      tags:
        - Messages
      summary: Get message
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Message":{
                            "ID":"I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w==",
                            "Order": 367,
                            "Subject":"Fw: test",
                            "Unread":0,
                            "Type": 0, // 0 = INBOX, 1 = DRAFT, 2 = SENT, 3 = INBOX_AND_SENT
                            "Sender": {
                                "Address":"jason@protonmail.dev",
                                "Name":"\u79d1\u6280\u798f\u5e03\u65af\u4e2d\u6587\u7f51"
                            },
                            "ReplyTo": {
                                "Address":"jason@protonmail.dev",
                                "Name":"\u79d1\u6280\u798f\u5e03\u65af\u4e2d\u6587\u7f51"
                            },
                            "ReplyTos": [
                                {
                                    "Address":"jason@protonmail.dev",
                                    "Name":"\u79d1\u6280\u798f\u5e03\u65af\u4e2d\u6587\u7f51"
                                },
                                {
                                    "Address": "example@example.com",
                                    "Name": "Example McExample"
                                }
                            ],
                            "ToList":[
                                {
                                    "Address":"bart.c.butler@gmail.com",
                                    "Name":"Bart",
                                    "Group": "" // Group name if present and sent/draft
                                }
                            ],
                            "Time":1433649408,
                            "Size":6959782,
                            "Location":1, // Deprecated, use LabelIDs instead
                            "Starred":0, // Deprecated, use LabelIDs instead
                            "IsEncrypted":5,
                            "ExpirationTime":0,
                            "IsReplied":0,
                            "IsRepliedAll":0,
                            "IsForwarded":0,
                            "SpamScore": 101,  // 100 is PM spoofed, 101 is dmarc failed
                            "AddressID":"222",
                            "Body":"-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----",
                            "MIMEType": "text/html",
                            "CCList":[

                            ],
                            "BCCList":[

                            ],
                            "Header":"(No Header)",
                            "Attachments":[
                                {
                                    "ID":"I6hgx3Ol_sdfAs832J2==",
                                    "Name":"image.jpg",
                                    "Size": 1503,
                                    "MIMEType":"image\/jpeg",
                                    "KeyPackets":"wcBMA6rw6TH9oRKuAQf\/Q3scaoBPjn710+EhfiIP0jF2udWfZ4Thv9TCiaolRMMhivqBpOoeFuyVi6\/LqpibLeVu3karg7zvFTFb+97eWF8ZP8cg8pPjyP4QRclZ4v1hfF1G6Tlw5L3TWt9j5WeMpinjJ3MY0df9WUzf9u+c7AoKNUsfuXHQ4o2ry94ccVYLfm13dw2gEkHxqMkwJ+SHR7vuKADl1EQUzkYjq7+pF3xje4Wwr0Xg+GAcOBQVUcQ3tkbvwZq3\/qxhavP5Pdlei\/8BGUreWQVicKFY5yW3nz+RgHkwqKNwdRnjr1mcFStv45oEicAcccb72FyXuHrhbAzoBmJT2ngQMxUS9+ZsTg==", // Present if attachment is encrypted
                                    "Headers": {
                                        "content-type": "image\/jpeg",
                                        "content-transfer-encoding": "base64",
                                        "content-disposition": "attachment; filename=\"image.jpg\""
                                    }
                                }
                            ],
                            "LabelIDs":[
                                "1",
                                "d3HYa3E394T_ACXDmTaBub14w=="
                            ],
                            "ExternalID": null
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: messageid
        in: path
        description: the message id
        schema:
          type: string
          example: ACXDmTaBub14w==
        required: true
  /metrics:
    post:
      tags:
        - Metrics
      summary: Send Metrics Report
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Log" : "signup",
                      "ID" : "29347098_1478812271", // (random digits)_(timestamp of ID creation)
                      "Whatever JSON": {
                          "you": "want"
                      }
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /organizations:
    get:
      tags:
        - Organizations
      summary: Get organization
      description: Get information about current organization
      responses:
        '200':
          headers:
            Access:
              schema:
                type: string
                example: application/vnd.protonmail.api+json;apiversion=0
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Organization":
                        {
                            "DisplayName": "My Org",
                            "PlanName": "plus",
                            "VPNPlanName": null,
                            "MaxDomains": 4,
                            "MaxAddresses": 20,
                            "MaxSpace": 10000000000,
                            "MaxMembers": 15,
                            "Features": 0, // bits, 1 = catch-all addresses
                            "UsedDomains": 0,
                            "UsedMembers": 1,
                            "UsedAddresses": 0,
                            "UsedSpace": 81788997,
                            "AssignedSpace": 10000000000
                        },
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
        '401':
          $ref: '#/components/responses/InvalidAccessToken'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /organizations/keys:
    get:
      tags:
        - Organizations|Organization Keys
      summary: Get organization keys
      description: Get PGP keys of the current organization
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "PublicKey": "-----BEGIN PGP PUBLIC KEY BLOCK-----\n-----BEGIN PGP PUBLIC KEY BLOCK-----",
                        "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----\n-----BEGIN PGP PRIVATE KEY BLOCK-----",
                    }
            <unknown>:
              schema:
                type: object
                properties:
                  '**PublicKey**':
                    type: string
                    description: organization public key
                  '**PrivateKey**':
                    type: string
                    description: organization private key encrypted with mailbox password hash
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
        '401':
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                  Error:
                    type: string
                  Details:
                    type: string
              examples:
                example:
                  value: |-
                    {
                      "Code": "401",
                      "Error": "Invalid access token",
                      "Details": "{}"
                    }
            <unknown>:
              schema:
                type: object
                properties:
                  '**PublicKey**':
                    type: string
                    description: organization public key
                  '**PrivateKey**':
                    type: string
                    description: organization private key encrypted with mailbox password hash
          description: '[Unauthorized](https://tools.ietf.org/html/rfc7235#section-3.1)'
        '403':
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                  Error:
                    type: string
                  Details:
                    type: string
              examples:
                example:
                  value: |-
                    {
                      "Code": "403",
                      "Error": "Access token does not have sufficient scope",
                      "Details": "{}"
                    }
            <unknown>:
              schema:
                type: object
                properties:
                  '**PublicKey**':
                    type: string
                    description: organization public key
                  '**PrivateKey**':
                    type: string
                    description: organization private key encrypted with mailbox password hash
          description: '[Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3)'
      security:
        - pm_authentication: []
    put:
      tags:
        - Organizations|Organization Keys
      summary: Create or replace organization keys
      description: Replace current organization keys and member keys
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ClientEphemeral": "<base64_encoded_ephemeral>",
                      "ClientProof": "<base64_encoded_proof>",
                      "SRPSession": "<hex_encoded_session_id>",
                      "TwoFactorCode": 203941, // if enabled
                      "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----\n-----BEGIN PGP PRIVATE KEY BLOCK-----",
                      "BackupPrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----\n-----BEGIN PGP PRIVATE KEY BLOCK-----",
                      "BackupKeySalt": "0123456789abcdef",
                      "Tokens": [
                          {
                              "ID" : "G1MbEt3Ep5P_EWz8WbHVAOl_6h==",
                              "Token": "-----BEGIN PGP MESSAGE-----\n-----END PGP MESSAGE-----"
                          }
                      ]
                  }
          <unknown>:
            schema:
              properties:
                ClientEphemeral:
                  type: string
                  description: 'required, client ephemeral, base64-encoded'
                  example: G1MbEt3Ep5P_EWz8WbHVAOl_6h==
                ClientProof:
                  type: string
                  description: 'required, client proof, base64-encoded'
                  example: G1MbEt3Ep5P_EWz8WbHVAOl_6h==
                SRPSession:
                  type: string
                  description: 'required, SRP session ID, hex-encoded'
                  example: abcdef0123456789
                TwoFactorCode:
                  type: integer
                  description: required if enabled
                  example: 123456
                PrivateKey:
                  type: string
                  description: organization private key encrypted with mailbox password hash
                  example: |-
                    -----BEGIN PGP PRIVATE KEY BLOCK-----
                    -----END PGP PRIVATE KEY BLOCK-----
                BackupPrivateKey:
                  type: string
                  description: backup private key encrypted with backup password hash
                  example: |-
                    -----BEGIN PGP PRIVATE KEY BLOCK-----
                    -----END PGP PRIVATE KEY BLOCK-----
                BackupKeySalt:
                  type: string
                  description: 'required, random 16 bytes base64 encoded'
                  example: 0123456789abcdef
                Tokens:
                  type: object
                  properties:
                    ID:
                      type: string
                      description: '`MemberKeyID` of non-private user `MemberKey`'
                      example: G1MbEt3Ep5P_EWz8WbHVAOl_6h==
                    Token:
                      type: string
                      description: '`MemberKey` token encrypted with new org key'
                      example: |-
                        -----BEGIN PGP MESSAGE-----
                        -----END PGP MESSAGE-----
                  description: array of member IDs and tokens
        required: true
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
        '401':
          $ref: '#/components/responses/InvalidAccessToken'
        '403':
          $ref: '#/components/responses/AccessTokenInsufficientScope'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /organizations/keys/activate:
    put:
      tags:
        - Organizations
      summary: Activate organization private key
      description: Update inactive private key with new copy encrypted with current mailbox password
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----\n-----BEGIN PGP PRIVATE KEY BLOCK-----"
                  }
          <unknown>:
            schema:
              properties:
                PrivateKey:
                  type: string
                  description: organization private key encrypted with mailbox password hash
                  example: |-
                    -----BEGIN PGP PRIVATE KEY BLOCK-----
                    -----END PGP PRIVATE KEY BLOCK-----
        required: true
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
        '401':
          $ref: '#/components/responses/InvalidAccessToken'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /organizations/keys/backup:
    get:
      tags:
        - Organizations|Organization Backup Key
      summary: Get backup key
      description: Get current organization backup private key
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----\n-----BEGIN PGP PRIVATE KEY BLOCK-----",
                      "KeySalt": "0123456789abcdef"
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
        '401':
          $ref: '#/components/responses/InvalidAccessToken'
        '403':
          $ref: '#/components/responses/AccessTokenInsufficientScope'
      security:
        - pm_authentication: []
    put:
      tags:
        - Organizations|Organization Backup Key
      summary: Update backup key
      description: Update current organization backup private key
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----\n-----BEGIN PGP PRIVATE KEY BLOCK-----",
                    "KeySalt": "0123456789abcdef"
                  }
          <unknown>:
            schema:
              properties:
                PrivateKey:
                  type: string
                  description: organization private key encrypted with backup password hash
                  example: |-
                    -----BEGIN PGP PRIVATE KEY BLOCK-----
                    -----END PGP PRIVATE KEY BLOCK-----
                KeySalt:
                  type: string
                  description: 'required, random 16 bytes base64 encoded'
                  example: 0123456789abcdef
        required: true
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
        '401':
          $ref: '#/components/responses/InvalidAccessToken'
        '403':
          $ref: '#/components/responses/AccessTokenInsufficientScope'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /organizations/name:
    put:
      tags:
        - Organizations
      summary: Update organization name
      description: Update current organization name
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Organization": {
                      "DisplayName": "E-Corp"
                    }
                  }
          <unknown>:
            schema:
              properties:
                DisplayName:
                  type: string
                  description: 'required, organization name, maximum 40 characters'
                  example: My Organization
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Organization":
                        {
                            "DisplayName": "E-Corp",
                            "PlanName": "plus",
                            "VPNPlanName": "vpnplus",
                            "MaxDomains": 4,
                            "MaxAddresses": 20,
                            "MaxSpace": 10000000000,
                            "MaxMembers": 15,
                            "MaxVPN": 5,
                            "Features": 0, // bits, 1 = catch-all addresses
                            "UsedDomains": 0,
                            "UsedMembers": 1,
                            "UsedAddresses": 0,
                            "UsedSpace": 81788997,
                            "AssignedSpace": 10000000000,
                            "UsedVPN": 5,
                            "HasKeys": 1
                        },
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
        '401':
          $ref: '#/components/responses/InvalidAccessToken'
        '403':
          $ref: '#/components/responses/AccessTokenInsufficientScope'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /payments/bcinfo:
    post:
      tags:
        - Payments
      summary: Create payment for Blockchain.info
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Amount": 1500,
                    "Currency": "USD"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "AmountBitcoin": 0.0012125469,
                      "Address": "18T6LQR2HkCE7v9uyWVjdmXukcXrj9zRMW"
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid_optional'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /payments/credit:
    post:
      tags:
        - Payments
      summary: Buy credit
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Amount": 100,
                      "Credit": 100, // optional if GiftCode present
                      "Currency": "USD", // optional if GiftCode present
                      "Payment" : { // optional, can use PaymentMethodID instead
                          "Type": "card",
                          "Details": {
                              "Number":4242424242424242,
                              "ExpMonth":12,
                              "ExpYear":2017,
                              "CVC":123,
                              "Name":"Sally Seals",
                              "Country":"USA",
                              "ZIP":94043
                          }
                      },
                      "PaymentMethodID" : "<encrypted_payment_method_id>", // optional, can use instead of Payment
                      "GiftCode" : "ABCDEFHJMNPQRSTV" // optional
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /payments/credit/check:
    put:
      tags:
        - Payments
      summary: Validate credit request
      requestBody:
        $ref: '#/components/requestBodies/VerifyOrValidateCredit'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Currency": "USD",
                      "Credit": 100,
                      "Gift": -100,
                      "AmountDue": 0
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /payments/donate:
    post:
      tags:
        - Payments
      summary: Donate
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Amount": 100,
                      "Currency": "USD",
                      "Payment" : { // optional, can use PaymentMethodID if authenticated
                          "Type": "card",
                          "Details": {
                              "Number":4242424242424242,
                              "ExpMonth":12,
                              "ExpYear":2017,
                              "CVC":123,
                              "Name":"Sally Seals",
                              "Country":"USA",
                              "ZIP":94043
                          }
                      },
                      "PaymentMethodID" : "encrypted_payment_method_id" // optional, can use instead of Payment if authenticated
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /payments/invoices:
    get:
      tags:
        - Payments
      summary: Get invoices in reverse time order
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Total": 1,
                      "Invoices": [
                        {
                          "ID": "1036",
                          "Type": 1,
                          "State": 1,
                          "Currency": "USD",
                          "AmountDue": 0,
                          "AmountCharged": 52,
                          "CreateTime": 1456599032,
                          "ModifyTime": 1456599033,
                          "AttemptTime": 1456599034,
                          "Attempts": 1
                        }
                      ],
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: Page
        in: query
        description: Page of results
        required: false
        schema:
          type: integer
          example: 0
      - name: PageSize
        in: query
        description: Results per page
        required: false
        schema:
          type: integer
          example: 25
      - name: Owner
        in: query
        description: 'User = 0, Organization = 1'
        required: false
        schema:
          type: integer
          example: 0
      - name: State
        in: query
        description: 'Unpaid = 0, Paid = 1, Void = 2, Billed = 3'
        required: false
        schema:
          type: integer
          example: 0
      - name: Type
        in: query
        description: 'Other = 0, Subscription = 1, Cancellation = 2, Credit = 3, Donation = 4'
        required: false
        schema:
          type: integer
          example: 0
  '/payments/invoices/{id}':
    get:
      tags:
        - Payments
      summary: Get an Invoice as PDF
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
        - name: PaperSize
          in: query
          description: 'Letter, Legal, A3, A4'
          required: false
          schema:
            type: string
            example: A4
      responses:
        '200':
          headers:
            Content-Disposition:
              schema:
                type: string
                example: attachment; filename = "Invoice.pdf"
            Content-Length:
              schema:
                type: string
                example: '1532'
            Content-Transfer-Encoding:
              schema:
                type: string
                example: binary
          content:
            application/pdf:
              examples:
                example:
                  value: '{pdf_file_content}'
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Payments
      summary: Pay an unpaid invoice
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Amount" : 52,
                      "Currency" : "USD",
                      "Payment" : { // optional, can use PaymentMethodID instead
                          "Type": "card",
                          "Details": {
                              "Number":4242424242424242,
                              "ExpMonth":12,
                              "ExpYear":2017,
                              "CVC":123,
                              "Name":"Sally Seals",
                              "Country":"USA",
                              "ZIP":94043
                          }
                      },
                      "PaymentMethodID": "encrypted_id", // optional, can use Payment instead
                      "GiftCode" : "ABCDEFHJMNPQRSTV" // optional
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: id
        in: path
        description: invoice ID
        schema:
          type: integer
          example: 1050
        required: true
  '/payments/invoices/{id}/check':
    put:
      tags:
        - Payments
      summary: Compute credit for invoice
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "GiftCode" : "ABCDEFHJMNPQRSTV" // optional
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Currency": "USD",
                      "Amount": 1500,
                      "Gift": -100,
                      "Credit": -1348,
                      "AmountDue": 52,
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: id
        in: path
        description: invoice ID
        schema:
          type: integer
          example: 1050
        required: true
  /payments/methods:
    get:
      tags:
        - Payments
      summary: Get payment methods in priority order
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "PaymentMethods": [
                        {
                          "ID": "<encrypted_id>",
                          "Type": "card",
                          "Details": {
                            "ExpMonth": 12,
                            "ExpYear": 2017,
                            "Name": "Sally Seals",
                            "Country": "USA",
                            "ZIP": 94043,
                            "Brand": "Visa",
                            "Last4": "1881"
                          }
                        },
                        {
                          "ID": "<encrypted_id>",
                          "Type": "card",
                          "Details": {
                            "ExpMonth": 12,
                            "ExpYear": 2017,
                            "Name": "Sally Seals",
                            "Country": "USA",
                            "ZIP": 94043,
                            "Brand": "Visa",
                            "Last4": "4242"
                          }
                        }
                      ],
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Payments
      summary: Create or update a payment method
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Type": "card",
                    "Details": {
                      "Number": 4242424242424242,
                      "ExpMonth": 12,
                      "ExpYear": 2017,
                      "CVC": 123,
                      "Name": "Sally Seals",
                      "Country": "USA",
                      "ZIP": 94043
                    }
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "PaymentMethod": {
                        "ID": "<encrypted_id>",
                        "Type": "card",
                        "Details": {
                          "ExpMonth": 12,
                          "ExpYear": 2017,
                          "Name": "Sally Seals",
                          "Country": "USA",
                          "ZIP": 94043,
                          "Brand": "Visa",
                          "Last4": "4242"
                        }
                      },
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /payments/methods/order:
    put:
      tags:
        - Payments
      summary: First will be charged for subscriptions
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "PaymentMethodIDs" : [     // Will amend the order of payments with the order of the corresponding PaymentMethodIDs
                          "-Bpgivr5H2qGDRiUQ4-7gm5YLf215MEgZCdzOtLW5psxgB8oNc8OnoFRykab4Z23EGEW1ka3GtQPF9xwx9-VUA==",
                          "pIJGEYyNFsPEb61otAc47_X8eoSeAfMSokny6dmg3jg2JrcdohiRuWSN2i1rgnkEnZmolVx4Np96IcwxJh1WNw==",
                          "l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA=="
                  ]
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  '/payments/methods/{id}':
    delete:
      tags:
        - Payments
      summary: Delete payment method
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: id
        in: path
        description: encrypted ID of method
        schema:
          type: string
          example: <encrypted_id>
        required: true
  /payments/paypal:
    post:
      tags:
        - Payments
      summary: Create payment for Paypal
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Amount" : 1500,
                      "Currency" : "USD" // Only USD allowed for now
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "ApprovalURL": "https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_express-checkout&token=EC-8SP67484X0368992Y",
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid_optional'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /payments/plans:
    get:
      tags:
        - Payments
      summary: Get plans available to user
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Plans": [
                            {
                                "ID": "<encrypted_id>",
                                "Type": 1,
                                "Cycle": 1,
                                "Name": "plus",
                                "Title": "ProtonMail+ (monthly)",
                                "Currency": "USD",
                                "Amount": 500,
                                "MaxDomains": 1,
                                "MaxAddresses": 5,
                                "MaxSpace": 5368709120,
                                "MaxMembers": 1,
                                "MaxVPN": 0,
                                "Services": 1, // bits, 1 = mail, 4 = VPN
                                "Features": 0, // bits, 1 = catch-all addresses
                                "Quantity": 1
                            }
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: Currency
        in: query
        description: ISO currency code
        schema:
          type: string
          example: USD
      - name: Cycle
        in: query
        description: months in billing cycle
        schema:
          type: integer
          example: 1
  /payments/subscription:
    get:
      tags:
        - Payments
      summary: Get current subscription
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Subscription": {
                            "ID": "<encrypted_sub_id>",
                            "InvoiceID": "1003",
                            "Cycle": 1,
                            "PeriodStart": 1455617471,
                            "PeriodEnd": 1458119471,
                            "CouponCode": null,
                            "Currency": "USD",
                            "Amount": 2500,
                            "Plans": [
                                {
                                    "ID": "<encrypted_plan_id2>",
                                    "Type": 1,
                                    "Cycle": 1,
                                    "Name": "business",
                                    "Title": "ProtonMail Business (monthly)",
                                    "Currency": "USD",
                                    "Amount": 1000,
                                    "MaxDomains": 1,
                                    "MaxAddresses": 5,
                                    "MaxSpace": 10737418240,
                                    "MaxMembers": 2,
                                    "MaxVPN": 0,
                                    "Services": 1, // bits, 1 = mail, 4 = VPN
                                    "Features": 1, // bits, 1 = catch-all addresses
                                    "Quantity": 1
                                },
                                {
                                    "ID": "<encrypted_plan_id2>",
                                    "Type": 0,
                                    "Cycle": 1,
                                    "Name": "1member",
                                    "Title": "+1 Member (monthly)",
                                    "Currency": "USD",
                                    "Amount": 500,
                                    "MaxDomains": 0,
                                    "MaxAddresses": 0,
                                    "MaxSpace": 0,
                                    "MaxMembers": 1,
                                    "MaxVPN": 0,
                                    "Services": 1, // bits, 1 = mail, 4 = VPN
                                    "Features": 0, // bits, 1 = catch-all addresses
                                    "Quantity": 3
                                }
                            ]
                            },
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Payments
      summary: Create or update subscription
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Amount" : 0,
                      "Currency" : "USD",
                      "Cycle": 1,
                      "Payment" : { // optional if Amount = 0, can also use PaymentMethodID instead
                          "Type": "card",
                          "Details": {
                              "Number":4242424242424242,
                              "ExpMonth":12,
                              "ExpYear":2017,
                              "CVC":123,
                              "Name":"Sally Seals",
                              "Country":"USA",
                              "ZIP":94043
                          }
                      },
                      "PaymentMethodID" : "<encrypted_payment_method_id>", // Optional if Amount = 0, can also use Payment
                      "CouponCode" : "HI",
                      "GiftCode" : "ABCDEFHJMNPQRSTV", // optional
                      "PlanIDs": {
                          "<encrypted_plan_id1>": 1, // key is PlanID, value is quantity
                          "<encrypted_plan_id2>": 1
                      }
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Subscription": {
                            "ID": "<encrypted_sub_id>",
                            "InvoiceID": "<encrypted_invoice_id>",
                            "Cycle": 1,
                            "PeriodStart": 1455617471,
                            "PeriodEnd": 1458119471,
                            "CouponCode": null,
                            "Currency": "USD",
                            "Amount": 1500,
                            "Plans": [
                                {
                                    "ID": "<encrypted_plan_id2>",
                                    "Type": 1,
                                    "Cycle": 1,
                                    "Name": "business",
                                    "Title": "ProtonMail Business (monthly)",
                                    "Currency": "USD",
                                    "Amount": 1000,
                                    "MaxDomains": 1,
                                    "MaxAddresses": 5,
                                    "MaxSpace": 10737418240,
                                    "MaxMembers": 2,
                                    "MaxVPN": 0,
                                    "Services": 1, // bits, 1 = mail, 4 = VPN
                                    "Features": 1, // bits, 1 = catch-all addresses
                                    "Quantity": 1
                                },
                                {
                                    "ID": "<encrypted_plan_id2>",
                                    "Type": 0,
                                    "Cycle": 1,
                                    "Name": "1member",
                                    "Title": "+1 Member (monthly)",
                                    "Currency": "USD",
                                    "Amount": 500,
                                    "MaxDomains": 0,
                                    "MaxAddresses": 0,
                                    "MaxSpace": 0,
                                    "MaxMembers": 1,
                                    "MaxVPN": 0,
                                    "Services": 1, // bits, 1 = mail, 4 = VPN
                                    "Features": 0, // bits, 1 = catch-all addresses
                                    "Quantity": 1
                                }
                            ]
                        },
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    delete:
      tags:
        - Payments
      summary: Delete c
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /payments/subscription/check:
    put:
      tags:
        - Payments
      summary: Validate a subscription
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "CouponCode" : "HI",
                      "GiftCode" : "ABCDEFHJMNPQRSTV", // optional
                      "Currency" : "USD",
                      "Cycle": 1,
                      "PlanIDs": {
                          "1001": 1, // key is PlanID, value is quantity
                          "1005": 1
                      }
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Amount": 1500,
                        "AmountDue": 0,
                        "Proration": -1448,
                        "CouponDiscount": 0,
                        "Coupon" : { // null if coupon invalid
                            "Code" : "HI",
                            "Description" : "Description of HI"
                        },
                        "Credit": 48,
                        "Currency": "USD",
                        "Cycle": 1,
                        "Gift": -100,
                        "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /payments/verify:
    post:
      tags:
        - Payments
      summary: Verify
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Amount": 100,
                      "Credit": 100, // optional if GiftCode present
                      "Currency": "USD", // optional if GiftCode present
                      "Payment" : { // optional if
                          "Type": "card",
                          "Details": {
                              "Number":4242424242424242,
                              "ExpMonth":12,
                              "ExpYear":2017,
                              "CVC":123,
                              "Name":"Sally Seals",
                              "Country":"USA",
                              "ZIP":94043
                          }
                  },
                      "GiftCode" : "ABCDEFHJMNPQRSTV" // optional
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "VerifyCode": "code_for_account_creation"
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /payments/verify/check:
    put:
      tags:
        - Payments
      summary: Validate verify request
      requestBody:
        $ref: '#/components/requestBodies/VerifyOrValidateCredit'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Currency": "USD",
                      "Credit": 100,
                      "Gift": -100,
                      "AmountDue": 0
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /reports/bug:
    post:
      tags:
        - Reports
      summary: Report a bug
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
            examples:
              example:
                value: |-
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="OS"

                  iOS
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="OSVersion"

                  8.0.3
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="Client"

                  Web
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="ClientVersion"

                  2.0.0
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="ClientType"

                  1 // 1 = email, 2 = VPN
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="Title"

                  My issue title
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="Description"

                  Some text here
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="Username"

                  4w350m3h4x0r
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="Email"

                  derp@gmail.com
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="Country"

                  MK
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="ISP"

                  Makedonski Telekom AD-Skopje
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
                  Content-Disposition: form-data; name="MyAttachment"; filename="logs.txt"
                  Content-Type: text/plain

                  {attachment contents}
                  ----WebKitFormBoundary7MA4YWxkTrZu0gW
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /reports/crash:
    post:
      tags:
        - Reports
      summary: Report a client crash
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "OS": "iOS", // Optional
                      "OSVersion" : "8.0.3", // Optional
                      "Browser": "Safari", // Optional
                      "BrowserVersion" : "8", // Optional
                      "Client": "Web", // Client should supply
                      "ClientVersion" : "2.0.0", // Client should supply
                      "ClientType" : 1, // 1 = email, 2 = VPN
                      "Debug": { // Client should supply
                          "Whatever JSON": "you want"
                      }
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /reports/csp:
    post:
      tags:
        - Reports
      summary: Report a CSP violation
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "csp-report": {
                      "document-uri": "http://example.com/signup.html",
                      "referrer": "",
                      "blocked-uri": "http://example.com/css/style.css",
                      "violated-directive": "style-src cdn.example.com",
                      "original-policy": "default-src 'none'; style-src cdn.example.com; report-uri /_/csp-reports"
                    }
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /reports/phishing:
    post:
      tags:
        - Reports
      summary: Report a phishing email
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "MessageID": "I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w==",
                      "MIMEType" : "text/html", // or text/plain
                      "Body": "<decrypted message body>"
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  '/reports/sentry/api/:sentry_project_id/store':
    post:
      tags:
        - Reports
      summary: Report a client crash via Sentry Proxy
      description: |-
        Theb interface proxies request generated by a Sentry client to a configured
        Sentry server.

        See: https://docs.sentry.io/clientdev/
  /reset:
    post:
      tags:
        - Reset
      summary: Request login reset token
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Username": "derp",
                    "NotificationEmail": "derp@gmail.com"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 12040,
                      "Error": "Username and notification email mismatch",
                      "Details": {}
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /reset/username:
    post:
      tags:
        - Reset
      summary: Send usernames to notification email
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "NotificationEmail": "derp@derp.com"
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  '/reset/{username}/{token}':
    get:
      tags:
        - Reset
      summary: Validate reset token
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 12031,
                      "Error": "Invalid reset token",
                      "Details": {}
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: username
        in: path
        schema:
          type: string
          example: bob
        required: true
      - name: token
        in: path
        description: 16-character reset token
        schema:
          type: string
          example: 983c8a169ba7ee02
        required: true
  /settings:
    get:
      tags:
        - Setting
      summary: Get general settings
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "UserSettings": {
                            "PasswordMode": 1,
                            "Email": {
                                "Value": "abc@gmail.com",
                                "Status": 0,
                                "Notify": 1,
                                "Reset": 0
                            },
                            "Phone": {
                                "Value": "+18005555555",
                                "Status": 0,
                                "Notify": 0,
                                "Reset": 0
                            },
                            "News": 244,
                            "Locale": "en_US",
                            "LogAuth": 2,
                            "InvoiceText": "रिवार में हुआ। ज檷\r\nCartoon Law Services\r\n1 DisneyWorld Lane\r\nOrlando, FL, 12345\r\nVAT blahblahlblahblah",
                            "TwoFactor": 1,
                            "TOTP": 0,
                            "U2FKeys": [
                                {
                                    "Label": "A name",
                                    "KeyHandle": "aKeyHandle",
                                    "Compromised": 0 // or 1
                                }
                            ]
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/2fa:
    put:
      tags:
        - Setting
      summary: Disable 2FA
      description: Disables all the 2FA methods.
      requestBody:
        $ref: '#/components/requestBodies/LoginData2'
      responses:
        '200':
          $ref: '#/components/responses/TwoFactorDisableOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/2fa/codes:
    post:
      tags:
        - Setting
      summary: Regenerate codes
      description: Replace current recovery codes with new ones.
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ClientEphemeral": "base64_encoded_ephemeral",
                      "ClientProof": "base64_encoded_proof",
                      "SRPSession": "hex_encoded_session_key",
                      "U2F": {
                          "KeyHandle" : "<aKeyHandle>",
                          "ClientData": "1046-length string",
                              "SignatureData": "theSignatureData"
                      },
                      "TwoFactorCode": 123456 // either this or the U2F object
                  }
      responses:
        '200':
          $ref: '#/components/responses/TwoFactorActivationOK'
        '400':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 10041,
                      "Error": "Two Factor confirmation failed",
                      "Details": {}
                    }
          description: '[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/2fa/reset:
    post:
      tags:
        - Setting
      summary: Request Reset 2FA
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Username" : "user_name",
                      "Token" : "983c8a169ba7ee02" // Reset token
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
        '400':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 19502,
                      "Error": "Invalid reset token. Please request another token and try again",
                      "Details": {}
                    }
          description: '[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/2fa/totp:
    post:
      tags:
        - Setting
      summary: Signup for TOTP
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ClientEphemeral": "<base64_encoded_ephemeral>",
                      "ClientProof": "<base64_encoded_proof>",
                      "SRPSession": "<hex_encoded_session_key>",
                      "U2F": {
                          "KeyHandle" : "<aKeyHandle>",
                          "ClientData": "1046-length string",
                              "SignatureData": "theSignatureData"
                      },
                      "TwoFactorCode": 123456, // either this or the U2F object
                      "TOTPSharedSecret":"JBSWY3DPEHPK3PXP",
                      "TOTPConfirmation": 203941
                          // For older client, if TOTPConfirmation is *not*
                          // given, TwoFactorCode will be used
                  }
      responses:
        '200':
          $ref: '#/components/responses/TwoFactorActivationOK'
        '400':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 10041,
                      "Error": "Two Factor confirmation failed",
                      "Details": {}
                    }
          description: '[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/2fa/u2f:
    get:
      tags:
        - Setting|Signup for U2F
      summary: creating a challenge for initial key registering
      description: |-
        `RegisteredKeys`
         is an array of keys that are currently registered (this is necessary to
         return because this is how the key that is currently being registered 
        can determine whether it has already been registered)

        `Versions` indicates the key versions supported by the server
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "RegisteredKeys": [{
                            "Version": "U2F_V2",
                            "KeyHandle": <aKeyHandle>
                        }],
                        "Challenge": <challenge>,
                        "Versions": ["U2F_V2"]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - Setting|Signup for U2F
      summary: Completing the registration challenge and storing the key
      description: |+
        The scope password is used.



        - The first three parameters are SRP params (this route should probably be password-protected)

        - `ClientData` contains the server challenge

        - `RegistrationData` is the response to the server challenge

        - `Version` is the challenge version that was responded to

      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ClientEphemeral": "<base64_encoded_ephemeral>",
                      "ClientProof": "<base64_encoded_proof>",
                      "SRPSession": "<hex_encoded_session_key>",
                      "ClientData": "<identifies_challenge>",
                      "RegistrationData": "1046-length string",
                      "Version": "U2F_V2"
                  }
      responses:
        '200':
          $ref: '#/components/responses/TwoFactorActivationOK'
        '400':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 12061,
                      "Error": "Two Factor confirmation failed",
                      "Details": {}
                    }
          description: '[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/email:
    put:
      tags:
        - Setting
      summary: Update email
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ClientEphemeral": "<base64_encoded_ephemeral>",
                      "ClientProof": "<base64_encoded_proof>",
                      "SRPSession": "<hex_encoded_session_key>",
                      "TwoFactorCode": 203941, // if enabled
                      "Email": "abc@gmail.com"
                  }
      responses:
        '200':
          $ref: '#/components/responses/UserSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/email/notify:
    put:
      tags:
        - Setting
      summary: Turn on/off email notifications
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Notify": 0
                  }
      responses:
        '200':
          $ref: '#/components/responses/UserSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/email/reset:
    put:
      tags:
        - Setting
      summary: Enable or disable login password reset by email
      requestBody:
        $ref: '#/components/requestBodies/EnablePasswordResets'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "UserSettings": {
                            "PasswordMode": 1,
                            "Email": [
                                "Value": "abc@gmail.com",
                                "Status": 0,
                                "Notify": 1,
                                "Reset": 1
                            ],
                            "Phone": {
                                "Value": "+18005555555",
                                "Status": 0,
                                "Notify": 0,
                                "Reset": 0
                            },
                            "News": 244,
                            "Locale": "en_US",
                            "LogAuth": 2,
                            "InvoiceText": "रिवार में हुआ। ज檷\r\nCartoon Law Services\r\n1 DisneyWorld Lane\r\nOrlando, FL, 12345\r\nVAT blahblahlblahblah",
                            "TOTP": 0,
                            "TwoFactor": 0,
                            "U2FKeys": []
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/email/verify:
    post:
      tags:
        - Setting
      summary: Verify associated email address
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Token": "<token_value>"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "UserSettings": {
                            "PasswordMode": 1,
                            "Email": [
                                "Value": "abc@gmail.com",
                                "Status": 1,
                                "Notify": 1,
                                "Reset": 1
                            ],
                            "Phone": {
                                "Value": "+18005555555",
                                "Status": 0,
                                "Notify": 0,
                                "Reset": 0
                            },
                            "News": 244,
                            "Locale": "en_US",
                            "LogAuth": 2,
                            "InvoiceText": "रिवार में हुआ। ज檷\r\nCartoon Law Services\r\n1 DisneyWorld Lane\r\nOrlando, FL, 12345\r\nVAT blahblahlblahblah",
                            "TOTP": 0,
                            "TwoFactor": 0,
                            "U2FKeys": []
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/invoicetext:
    put:
      tags:
        - Setting
      summary: Update invoice user-defined text
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "InvoiceText" : "Mickey Mouse, Esq.\r\nCartoon Law Services" // Maximum 5 lines
                  }
      responses:
        '200':
          $ref: '#/components/responses/UserSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/locale:
    put:
      tags:
        - Setting
      summary: Update locale
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Locale": "en_US"
                  }
      responses:
        '200':
          $ref: '#/components/responses/UserSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/logauth:
    put:
      tags:
        - Setting
      summary: Update authentication logging
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "LogAuth" : 0 // 0 = off, 1 = on, 2 = on with IP logging
                  }
      responses:
        '200':
          $ref: '#/components/responses/UserSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail:
    get:
      tags:
        - Mail Setting
      summary: Get mail settings
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/alsoarchive:
    put:
      tags:
        - Mail Setting
      summary: Update default setting for archiving when applying labels
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "AlsoArchive" : 1 // 0 for off, 1 for on
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/attachpublic:
    put:
      tags:
        - Mail Setting
      summary: Update attach public key preference
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "AttachPublicKey": 0 // 0 for off, 1 for on
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/autocontacts:
    put:
      tags:
        - Mail Setting
      summary: Turn on/off autosave contacts
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "AutoSaveContacts": 0
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/autocrypt:
    put:
      tags:
        - Mail Setting
      summary: Update Autocrypt header sending preference
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Autocrypt": 0 // 0 for off, 1 for on
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/autoresponder:
    put:
      tags:
        - Mail Setting
      summary: Update Autoresponder
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "AutoResponder" : { 
                          "StartTime": 0, // seconds relative to the start of the period (unix timestamp for fixed interval)
                          "Endtime" :  0, // seconds relative to the end of the period (unix timestamp for fixed interval)
                          "Repeat": 1, // Mode: 0 => fixed interval, 1 => daily, 2 => weekly, 3 => monthly, 4 => permanent
                          "DaysSelected": [0, 1, 5, 6], // For daily mode: the day of the week expressed as an integer between 0 and 6. 0 is Sunday, 1 is Monday, etc.
                          "Subject": "Aw", // The subject prefix: e.g. "Re" for "Re: <original subject>"
                          "Message": "I'm not here.",
                          "IsEnabled": true,
                          "Zone": "Europe/Zurich"
                      }
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "MailSettings": {
                        "DisplayName": "Put Chinese Here",
                        "Signature": "Your signature here",
                        "Theme": "<CSS>",
                        "AutoResponder": {
                          "StartTime": 0,
                          "Endtime": 0,
                          "Repeat": 1,
                          "DaysSelected": [
                            0,
                            1,
                            5,
                            6
                          ],
                          "Subject": "Aw",
                          "Message": "I'm not here.",
                          "IsEnabled": true,
                          "Zone": "Europe/Zurich"
                        },
                        "AutoSaveContacts": 1,
                        "AutoWildcardSearch": 1,
                        "ComposerMode": 1,
                        "MessageButtons": 0,
                        "ShowImages": 0,
                        "ShowMoved": 3,
                        "ViewMode": 0,
                        "ViewLayout": 0,
                        "SwipeLeft": 0,
                        "SwipeRight": 3,
                        "AlsoArchive": 0,
                        "Hotkeys": 1,
                        "PMSignature": 1,
                        "ImageProxy": 0,
                        "NumMessagePerPage": 50,
                        "DraftMIMEType": "text/html",
                        "ReceiveMIMEType": "text/html",
                        "ShowMIMEType": "text/html"
                      }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/autowildcard:
    put:
      tags:
        - Mail Setting
      summary: Update Auto-Wildcard Search
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "AutoWildcardSearch": 0 // 0 for off, 1 for on
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/composermode:
    put:
      tags:
        - Mail Setting
      summary: Update composer mode
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ComposerMode" : 0 // 0 or 1
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/display:
    put:
      tags:
        - Mail Setting
      summary: Update display name
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "DisplayName": "test name"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "MailSettings": {
                            "DisplayName": "test name",
                            "Signature": "Your signature here",
                            "Theme": "<CSS>",
                            "AutoResponder": { 
                                "StartTime": 0, // seconds relative to the start of the period (unix timestamp for fixed interval)
                                "Endtime" :  0, // seconds relative to the end of the period (unix timestamp for fixed interval)
                                "Repeat": 0, // Mode: 0 => fixed interval, 1 => daily, 2 => weekly, 3 => monthly, 4 => permanent
                                "DaysSelected": [], // For daily mode: the day of the week expressed as an integer between 0 and 6. 0 is Sunday, 1 is Monday, etc.
                                "Subject": "Auto", // The subject prefix: e.g. "Re" for "Re: <original subject>"
                                "Message": "",
                                "IsEnabled: false,
                                "Zone": "Europe/Zurich"
                            },
                            "AutoSaveContacts": 1,
                            "AutoWildcardSearch": 1,
                            "ComposerMode": 1,
                            "MessageButtons": 0,
                            "ShowImages": 1,
                            "ShowMoved": 3,
                            "ViewMode": 0,
                            "ViewLayout": 0,
                            "SwipeLeft": 0,
                            "SwipeRight": 3,
                            "AlsoArchive": 0,
                            "Hotkeys": 1,
                            "PMSignature": 1,
                            "ImageProxy": 0,
                            "TLS": 0,
                            "RightToLeft": 0,
                            "AttachPublicKey": 0,
                            "Sign": 0,
                            "PGPScheme": 16,
                            "PromptPin": 1,
                            "Autocrypt": 1,
                            "NumMessagePerPage": 50,
                            "DraftMIMEType": "text/html",
                            "ReceiveMIMEType": "text/html",
                            "ShowMIMEType": "text/html"
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/drafttype:
    put:
      tags:
        - Mail Setting
      summary: Update Draft Type
      requestBody:
        $ref: '#/components/requestBodies/SetMIMEType'
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/hotkeys:
    put:
      tags:
        - Mail Setting
      summary: Update hotkeys flag
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Hotkeys" : 1 // 0 for off, 1 for on
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/imageproxy:
    put:
      tags:
        - Mail Setting
      summary: Update Image Proxy
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ImageProxy": 0 // 0 for off, 1 for on
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/images:
    put:
      tags:
        - Mail Setting
      summary: Update images bits
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ShowImages" : 0 // 0 for none, 1 for remote, 2 for embedded, 3 for remote and embedded
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/messagebuttons:
    put:
      tags:
        - Mail Setting
      summary: Update message buttons style
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "MessageButtons" : 0 // 0 or 1
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/moved:
    put:
      tags:
        - Mail Setting
      summary: Update show moved bits
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ShowMoved" : 0 // 0 for none, 1 for drafts, 2 for sent, 3 for drafts and sent
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/pgpscheme:
    put:
      tags:
        - Mail Setting
      summary: Update default PGP scheme
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "PGPScheme": 16 // 16 for PGP MIME, 8 for inline PGP
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/pmsignature:
    put:
      tags:
        - Mail Setting
      summary: Update PM Signature flag
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "PMSignature" : 1 // 0 for off, 1 for on
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "MailSettings": {
                            "DisplayName": "Put Chinese Here",
                            "Signature": "Your signature here",
                            "Theme": "<CSS>",
                            "AutoResponder": { 
                                 "StartTime": 0, // seconds relative to the start of the period (unix timestamp for fixed interval)
                                 "Endtime" :  0, // seconds relative to the end of the period (unix timestamp for fixed interval)
                                 "Repeat": 0, // Mode: 0 => fixed interval, 1 => daily, 2 => weekly, 3 => monthly, 4 => permanent
                                 "DaysSelected": [], // For daily mode: the day of the week expressed as an integer between 0 and 6. 0 is Sunday, 1 is Monday, etc.
                                 "Subject": "Auto", // The subject prefix: e.g. "Re" for "Re: <original subject>"
                                 "Message": "",
                                 "IsEnabled: false,
                                 "Zone": "Europe/Zurich"
                            },
                            "AutoSaveContacts": 1,
                            "AutoWildcardSearch": 1,
                            "ComposerMode": 1,
                            "MessageButtons": 0,
                            "ShowImages": 0,
                            "ShowMoved": 3,
                            "ViewMode": 0,
                            "ViewLayout": 0,
                            "SwipeLeft": 0,
                            "SwipeRight": 3,
                            "AlsoArchive": 0,
                            "Hotkeys": 1,
                            "PMSignature": 1,
                            "ImageProxy": 0,
                            "TLS": 0,
                            "RightToLeft": 0,
                            "AttachPublicKey": 0,
                            "Sign": 0,
                            "PGPScheme": 16,
                            "PromptPin": 1,
                            "Autocrypt": 1,
                            "NumMessagePerPage": 50,
                            "DraftMIMEType": "text/html",
                            "ReceiveMIMEType": "text/html",
                            "ShowMIMEType": "text/html"
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/promptpin:
    put:
      tags:
        - Mail Setting
      summary: Update key pinning prompt preference
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "PromptPin": 0 // 0 for off, 1 for on
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/receivetype:
    put:
      tags:
        - Mail Setting
      summary: Update Receive Type
      requestBody:
        $ref: '#/components/requestBodies/SetMIMEType'
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/righttoleft:
    put:
      tags:
        - Mail Setting
      summary: Update right to left composer preference
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "RightToLeft": 0 // 0 for off, 1 for on
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/showtype:
    put:
      tags:
        - Mail Setting
      summary: Update Show Type
      requestBody:
        $ref: '#/components/requestBodies/SetMIMEType'
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/sign:
    put:
      tags:
        - Mail Setting
      summary: Update default signing
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Sign": 0 // 0 for off, 1 for on
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/signature:
    put:
      tags:
        - Mail Setting
      summary: Update signature message
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Signature": "come from feng"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "MailSettings": {
                            "DisplayName": "Put Chinese Here",
                            "Signature": "come from feng",
                            "Theme": "<CSS>",
                            "AutoResponder": { 
                                "StartTime": 0, // seconds relative to the start of the period (unix timestamp for fixed interval)
                                "Endtime" :  0, // seconds relative to the end of the period (unix timestamp for fixed interval)
                                "Repeat": 0, // Mode: 0 => fixed interval, 1 => daily, 2 => weekly, 3 => monthly, 4 => permanent
                                "DaysSelected": [], // For daily mode: the day of the week expressed as an integer between 0 and 6. 0 is Sunday, 1 is Monday, etc.
                                "Subject": "Auto", // The subject prefix: e.g. "Re" for "Re: <original subject>"
                                "Message": "",
                                "IsEnabled: false,
                                "Zone": "Europe/Zurich"
                            },
                            "AutoSaveContacts": 1,
                            "AutoWildcardSearch": 1,
                            "ComposerMode": 1,
                            "MessageButtons": 0,
                            "ShowImages": 1,
                            "ShowMoved": 3,
                            "ViewMode": 0,
                            "ViewLayout": 0,
                            "SwipeLeft": 0,
                            "SwipeRight": 3,
                            "AlsoArchive": 0,
                            "Hotkeys": 1,
                            "PMSignature": 1,
                            "ImageProxy": 0,
                            "TLS": 0,
                            "RightToLeft": 0,
                            "AttachPublicKey": 0,
                            "Sign": 0,
                            "PGPScheme": 16,
                            "PromptPin": 1,
                            "Autocrypt": 1,
                            "NumMessagePerPage": 50,
                            "DraftMIMEType": "text/html",
                            "ReceiveMIMEType": "text/html",
                            "ShowMIMEType": "text/html"
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/swipeleft:
    put:
      tags:
        - Mail Setting
      summary: Update swipe left flag
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "SwipeLeft" : 0 // between 0 and 4 inclusive
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/swiperight:
    put:
      tags:
        - Mail Setting
      summary: Update swipe right flag
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "SwipeRight" : 0 // between 0 and 4 inclusive
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "MailSettings": {
                            "DisplayName": "Put Chinese Here",
                            "Signature": "Your signature here",
                            "Theme": "<CSS>",
                            "AutoResponder": { 
                                "StartTime": 0, // seconds relative to the start of the period (unix timestamp for fixed interval)
                                "Endtime" :  0, // seconds relative to the end of the period (unix timestamp for fixed interval)
                                "Repeat": 0, // Mode: 0 => fixed interval, 1 => daily, 2 => weekly, 3 => monthly, 4 => permanent
                                "DaysSelected": [], // For daily mode: the day of the week expressed as an integer between 0 and 6. 0 is Sunday, 1 is Monday, etc.
                                "Subject": "Auto", // The subject prefix: e.g. "Re" for "Re: <original subject>"
                                "Message": "",
                                "IsEnabled: false,
                                "Zone": "Europe/Zurich"
                            },
                            "AutoSaveContacts": 1,
                            "AutoWildcardSearch": 1,
                            "ComposerMode": 1,
                            "MessageButtons": 0,
                            "ShowImages": 0,
                            "ShowMoved": 3,
                            "ViewMode": 0,
                            "ViewLayout": 0,
                            "SwipeLeft": 0,
                            "SwipeRight": 0,
                            "AlsoArchive": 0,
                            "Hotkeys": 1,
                            "PMSignature": 1,
                            "ImageProxy": 0,
                            "TLS": 0,
                            "RightToLeft": 0,
                            "AttachPublicKey": 0,
                            "Sign": 0,
                            "PGPScheme": 16,
                            "PromptPin": 1,
                            "Autocrypt": 1,
                            "NumMessagePerPage": 50,
                            "DraftMIMEType": "text/html",
                            "ReceiveMIMEType": "text/html",
                            "ShowMIMEType": "text/html"
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/theme:
    put:
      tags:
        - Mail Setting
      summary: Update theme
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Theme": "<CSS or null string here>"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "MailSettings": {
                            "DisplayName": "Put Chinese Here",
                            "Signature": "Your signature here",
                            "Theme": "<CSS or null string here>",
                            "AutoResponder": { 
                                "StartTime": 0, // seconds relative to the start of the period (unix timestamp for fixed interval)
                                "Endtime" :  0, // seconds relative to the end of the period (unix timestamp for fixed interval)
                                "Repeat": 0, // Mode: 0 => fixed interval, 1 => daily, 2 => weekly, 3 => monthly, 4 => permanent
                                "DaysSelected": [], // For daily mode: the day of the week expressed as an integer between 0 and 6. 0 is Sunday, 1 is Monday, etc.
                                "Subject": "Auto", // The subject prefix: e.g. "Re" for "Re: <original subject>"
                                "Message": "",
                                "IsEnabled: false,
                                "Zone": "Europe/Zurich"
                            },
                            "AutoSaveContacts": 1,
                            "AutoWildcardSearch": 1,
                            "ComposerMode": 1,
                            "MessageButtons": 0,
                            "ShowImages": 1,
                            "ShowMoved": 3,
                            "ViewMode": 0,
                            "ViewLayout": 0,
                            "SwipeLeft": 0,
                            "SwipeRight": 3,
                            "AlsoArchive": 0,
                            "Hotkeys": 1,
                            "PMSignature": 1,
                            "ImageProxy": 0,
                            "TLS": 0,
                            "RightToLeft": 0,
                            "AttachPublicKey": 0,
                            "Sign": 0,
                            "PGPScheme": 16,
                            "PromptPin": 1,
                            "Autocrypt": 1,
                            "NumMessagePerPage": 50,
                            "DraftMIMEType": "text/html",
                            "ReceiveMIMEType": "text/html",
                            "ShowMIMEType": "text/html"
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/tls:
    put:
      tags:
        - Mail Setting
      summary: Update TLS
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "TLS": 0 // 0 for opportunistic TLS, 1 for require TLS, 2 for require DANE
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/viewlayout:
    put:
      tags:
        - Mail Setting
      summary: Update view layout flag
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ViewLayout" : 0 // 0 or 1
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/mail/viewmode:
    put:
      tags:
        - Mail Setting
      summary: Update view mode flag
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ViewMode" : 0 // 0 or 1
                  }
      responses:
        '200':
          $ref: '#/components/responses/MailSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/news:
    put:
      tags:
        - Setting
      summary: Update newsletter subscription
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "News" : 255 // 0 - 255 bitmap. 1 is announcements, 2 is features, 4 is newsletter. 16, 32, 64, and 128 are currently unused.
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "UserSettings": {
                        "PasswordMode": 1,
                        "Email": {
                          "Value": "abc@gmail.com",
                          "Status": 0,
                          "Notify": 1,
                          "Reset": 0
                        },
                        "Phone": {
                          "Value": "+18005555555",
                          "Status": 0,
                          "Notify": 0,
                          "Reset": 0
                        },
                        "News": 255,
                        "Locale": "en_US",
                        "LogAuth": 2,
                        "InvoiceText": "रिवार में हुआ। ज檷\r\nCartoon Law Services\r\n1 DisneyWorld Lane\r\nOrlando, FL, 12345\r\nVAT blahblahlblahblah",
                        "TOTP": 0,
                        "TwoFactor": 0,
                        "U2FKeys": []
                      }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/password:
    put:
      tags:
        - Setting
      summary: Update login password
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ClientEphemeral": "<base64_encoded_ephemeral>",
                      "ClientProof": "<base64_encoded_proof>",
                      "SRPSession": "<hex_encoded_session_id>",
                      "TwoFactorCode": 203941, // if enabled
                      "Auth": {
                          "Version" : 4,
                          "ModulusID" : "<encrypted_id>",
                          "Salt" : "<base64_encoded_salt>",
                          "Verifier" : "<base64_encoded_verifier>"
                      }
                  }
      responses:
        '200':
          $ref: '#/components/responses/UserSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/password/upgrade:
    put:
      tags:
        - Setting
      summary: Upgrade login password on login if version < 4
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Auth": {
                          "Version" : 4,
                          "ModulusID" : "<encrypted_id>",
                          "Salt" : "<base64_encoded_salt>",
                          "Verifier" : "<base64_encoded_verifier>"
                      }
                  }
      responses:
        '200':
          $ref: '#/components/responses/UserSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/phone:
    put:
      tags:
        - Setting
      summary: Update phone
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ClientEphemeral": "<base64_encoded_ephemeral>",
                      "ClientProof": "<base64_encoded_proof>",
                      "SRPSession": "<hex_encoded_session_key>",
                      "TwoFactorCode": 203941, // if enabled
                      "Phone": "+18005555555"
                  }
      responses:
        '200':
          $ref: '#/components/responses/UserSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/phone/notify:
    put:
      tags:
        - Setting
      summary: Turn on/off phone notifications
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Notify": 0
                  }
      responses:
        '200':
          $ref: '#/components/responses/UserSettingsOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/phone/reset:
    put:
      tags:
        - Setting
      summary: Enable or disable login password reset by phone
      requestBody:
        $ref: '#/components/requestBodies/EnablePasswordResets'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "UserSettings": {
                            "PasswordMode": 1,
                            "Email": [
                                "Value": "abc@gmail.com",
                                "Status": 0,
                                "Notify": 1,
                                "Reset": 1
                            ],
                            "Phone": {
                                "Value": "+18005555555",
                                "Status": 1,
                                "Notify": 0,
                                "Reset": 1
                            },
                            "News": 244,
                            "Locale": "en_US",
                            "LogAuth": 2,
                            "InvoiceText": "रिवार में हुआ। ज檷\r\nCartoon Law Services\r\n1 DisneyWorld Lane\r\nOrlando, FL, 12345\r\nVAT blahblahlblahblah",
                            "TOTP": 0,
                            "TwoFactor": 0,
                            "U2FKeys": []
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/phone/verify:
    post:
      tags:
        - Setting
      summary: Verify associated phone number
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Token": "<token_value>"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "UserSettings": {
                            "PasswordMode": 1,
                            "Email": [
                                "Value": "abc@gmail.com",
                                "Status": 0,
                                "Notify": 1,
                                "Reset": 1
                            ],
                            "Phone": {
                                "Value": "+18005555555",
                                "Status": 1,
                                "Notify": 0,
                                "Reset": 0
                            },
                            "News": 244,
                            "Locale": "en_US",
                            "LogAuth": 2,
                            "InvoiceText": "रिवार में हुआ। ज檷\r\nCartoon Law Services\r\n1 DisneyWorld Lane\r\nOrlando, FL, 12345\r\nVAT blahblahlblahblah",
                            "TOTP": 0,
                            "TwoFactor": 0,
                            "U2FKeys": []
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/totp:
    put:
      tags:
        - Setting
      summary: Disable TOTP
      description: Disables TOTP. Deletes recovery codes if TOTP was the last recovery method.
      requestBody:
        $ref: '#/components/requestBodies/LoginData2'
      responses:
        '200':
          $ref: '#/components/responses/TwoFactorDisableOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/u2f:
    put:
      tags:
        - Setting
      summary: Remove a U2F device
      description: Removing a U2F device identified by `key_handle`. Deletes the recovery codes if this U2F device was the last 2FA method.
      requestBody:
        $ref: '#/components/requestBodies/LoginData2'
      responses:
        '200':
          $ref: '#/components/responses/TwoFactorDisableOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/vpn:
    get:
      tags:
        - VPN Setting
      summary: Get VPN settings
      responses:
        '200':
          $ref: '#/components/responses/VPNSettingsOk'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/vpn/name:
    put:
      tags:
        - VPN Setting
      summary: Update VPN nam
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "VPNName": "jason1"
                  }
      responses:
        '200':
          $ref: '#/components/responses/VPNSettingsOk'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /settings/vpn/password:
    put:
      tags:
        - VPN Setting
      summary: Update VPN pas
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "VPNPassword": "123"
                  }
      responses:
        '200':
          $ref: '#/components/responses/VPNSettingsOk'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /users:
    get:
      tags:
        - User
      summary: Get user's info
      parameters:
        - $ref: '#/components/parameters/header_x-pm-uid'
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "User": {
                        "ID": "MJLke8kWh1BBvG95JBIrZvzpgsZ94hNNgjNHVyhXMiv4g9cn6SgvqiIFR5cigpml2LD_iUk_3DkV29oojTt3eA==",
                        "Name": "jason",
                        "UsedSpace": 96691332,
                        "Currency": "USD",
                        "Credit": 0,
                        "MaxSpace": 10737418240,
                        "MaxUpload": 26214400,
                        "Role": 2,
                        "Private": 1,
                        "Subscribed": 1,
                        "Services": 1,
                        "Delinquent": 0,
                        "Keys": [
                          {
                            "ID": "IlnTbqicN-2HfUGIn-ki8bqZfLqNj5ErUB0z24Qx5g-4NvrrIc6GLvEpj2EPfwGDv28aKYVRRrSgEFhR_zhlkA==",
                            "Version": 3,
                            "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----*-----END PGP PRIVATE KEY BLOCK-----",
                            "Fingerprint": "c93f767df53b0ca8395cfde90483475164ec6353",
                            "Activation": null,
                            "Primary": 1
                          }
                        ]
                      },
                      "Code": 1000
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - User
      summary: Create user
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |
                  {
                      "Username" : "user_name",
                      "Email": "notification@email",
                      "Token" : "token value",
                      "TokenType" : "captcha", // or "email", "sms", "invite", or "payment",
                      "Referrer" : "identifier", // optional, give referrer credit,
                      "Type" : 1 ,// 1 = mail, 2 = VPN
                      "Auth": {
                          "Version" : 4,
                          "ModulusID" : "<encrypted_id>",
                          "Salt" : "<base64_encoded_salt>",
                          "Verifier" : "<base64_encoded_verifier>"
                      }
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "User": {
                        "ID": "<encrypted_id>",
                        "Name": "user_name",
                        "UsedSpace": 0,
                        "Currency": "USD",
                        "Credit": 0,
                        "MaxSpace": 524288000,
                        "MaxUpload": 26214400,
                        "Role": 0,
                        "Private": 1,
                        "Subscribed": 0,
                        "Delinquent": 0,
                        "Keys": []
                      }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /users/available:
    get:
      tags:
        - User
      summary: Check if username already taken
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
        '400':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 12104,
                      "Error": "Special chars at the end of the username",
                      "Details": {}
                    }
          description: '[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: user_name
        in: query
        description: the username
        schema:
          type: string
          example: bart
  /users/check:
    put:
      tags:
        - User
      summary: Check user creation token validity
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Token" : "<token value>",
                      "TokenType" : "captcha", // or "email", "sms", "invite", "coupon" or "payment",
                      "Type" : 1 // 1 = mail, 2 = VPN
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Plans": [ // will only appear with successful coupon token checks
                            {
                                "ID": "S6oNe_lxq3GNMIMFQdAwOOk5wNYpZwGjBHFr5mTNp9aoMUaCRNsefrQt35mIg55iefE3fTq8BnyM4znqoVrAyA==",
                                "Type": 1,
                                "Name": "vpnplus",
                                "Title": "ProtonVPN Plus",
                                "MaxDomains": 0,
                                "MaxAddresses": 0,
                                "MaxSpace": 0,
                                "MaxMembers": 0,
                                "MaxVPN": 5,
                                "Services": 4,
                                "Features": 0,
                                "Cycle": 1,
                                "Currency": "USD",
                                "Amount": 1000,
                                "Quantity": 1
                            }
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /users/code:
    post:
      tags:
        - User
      summary: Send a verification code
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Type": "email", // email or sms
                      "Platform": "ios", // Optional, can use "android" as well if link support
                      "Destination": {
                          "Address": "example@example.com", // required if type is email
                          "Phone" : "6176767087" // required if type is sms
                      }
                  }
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /users/delete:
    put:
      tags:
        - User
      summary: 'Delete self, will invalidate API access token'
      requestBody:
        $ref: '#/components/requestBodies/LoginData1'
      responses:
        '200':
          $ref: '#/components/responses/OkWithServerProof'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /users/direct:
    get:
      tags:
        - User
      summary: Check if direct user signups are enabled
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Direct": 1,   // 1 if enabled, 0 if disabled--client should show invite form
                        "VerifyMethods": [
                            "captcha",
                            "email",
                            "sms"
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: Type
        in: query
        description: '1 => mail, 2 => VPN'
        required: false
        schema:
          type: integer
          example: 1
          enum:
            - '0'
            - '1'
  /users/human:
    get:
      tags:
        - User
      summary: Get options for human verification
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "VerifyMethods": [
                        "captcha"
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - User
      summary: Verify user is human
      parameters:
        - $ref: '#/components/parameters/header_api_version_1'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Token": "<token value>",
                    "TokenType": "captcha"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                            "Code": 1000,
                        }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /users/lock:
    put:
      tags:
        - User
      summary: Lock sensitive settings for keys/organization
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /users/password:
    put:
      tags:
        - User
      summary: Unlock password changes
      requestBody:
        $ref: '#/components/requestBodies/LoginData1'
      responses:
        '200':
          $ref: '#/components/responses/OkWithServerProof'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /users/unlock:
    put:
      tags:
        - User
      summary: Unlock sensitive settings for keys/organization
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "ClientEphemeral" : "<base64_encoded_ephemeral>",
                      "ClientProof" : "<base64_encoded_proof>",
                      "SRPSession": "<hex_encoded_session_id>"
                  }
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /vpn:
    get:
      tags:
        - VPN
      summary: Get client VPN information
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "VPN": {
                            "Status": 1, // 0 = no vpn access, 1 = vpn access, 2 = vpn access eligible, 3 = vpn access requested (waitlist)
                            "ExpirationTime": 0, // only relevant for 'trial' plan, timestamp if non-zero
                            "PlanName": "visionary", // other plans include 'free' and 'trial'
                            "MaxConnect": 10,
                            "MaxTier": 2,
                            "GroupID": "jason",
                            "Name": "jason", // OpenVPN name
                            "Password": "lol" // OpenVPN password
                        },
                        "Subscribed": 5,
                        "Services": 5,
                        "Delinquent": 0
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /vpn/accounting:
    post:
      tags:
        - VPN
      summary: Get accounting server VPN information
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Username": "jason", // VPN username
                      "ServerIP": "123.123.123.123", // Requested server
                      "Secret": "31691338caa3f688fe095e18ed9f7708aa7966c7ccb2f8e807b4773871c29130"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000
                        "VPN": {
                            "GroupID": "jason" // For now same as VPN username
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /vpn/auth:
    post:
      tags:
        - VPN
      summary: Get auth server VPN information
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Username": "jason", // VPN username
                      "ServerIP": "123.123.123.123", // Requested server
                      "Secret": "6a1040241ed5dd5897b660d1927fbf9a587212b38186b86b4873801cd12b362d"
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "VPN": {
                            "Status": 1, // always 1, server error if != 1
                            "ExpirationTime": 0, // only relevant for 'trial' plan, timestamp if non-zero
                            "PlanName": "visionary",
                            "MaxConnect": 10,
                            "MaxTier": 2,
                            "GroupID": "jason",
                            "Name": "jason", // OpenVPN name
                            "Password": "lol" // OpenVPN password
                        }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /vpn/config:
    get:
      tags:
        - VPN
      summary: Get the configuration file for a VPN server
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: '{plaintext_file_content}'
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
      - name: LogicalID
        in: query
        description: the logical server ID
        required: false
        schema:
          type: string
      - name: ServerID
        in: query
        description: the server ID
        required: false
        schema:
          type: string
      - name: Country
        in: query
        description: the two-letter country code
        required: false
        schema:
          type: string
      - name: Category
        in: query
        description: the category from which to get all configs
        required: false
        schema:
          type: string
          enum:
            - Country
            - Server
            - SecureCore
      - name: Tier
        in: query
        description: 'the user’s tier, used with the Category parameter'
        required: false
        schema:
          type: integer
      - name: Platform
        in: query
        description: the platform that the config file is used on (case-insensitive)
        schema:
          type: string
          enum:
            - Windows
            - macOS
            - Linux
            - iOS
            - Android
            - Router
      - name: Protocol
        in: query
        description: the protocol used
        required: false
        schema:
          type: string
          example: udp
          default: udp
          enum:
            - udp
            - tcp
  /vpn/loads:
    get:
      tags:
        - VPN
      summary: Get array of VPN logical server loads and scores
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "LogicalServers": [
                        {
                          "ID": "-Bpgivr5H2qGDRiUQ4-7gm5YLf215MEgZCdzOtLW5psxgB8oNc8OnoFRykab4Z23EGEW1ka3GtQPF9xwx9-VUA==",
                          "Load": 0,
                          "Score": 1
                        }
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /vpn/logicals:
    get:
      tags:
        - VPN
      summary: Get array of VPN logical server information
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "LogicalServers": [
                        {
                          "ID": "-Bpgivr5H2qGDRiUQ4-7gm5YLf215MEgZCdzOtLW5psxgB8oNc8OnoFRykab4Z23EGEW1ka3GtQPF9xwx9-VUA==",
                          "Name": "ES#1",
                          "EntryCountry": "ES",
                          "ExitCountry": "ES",
                          "Domain": "es-05.protonvpn.com",
                          "Tier": 2,
                          "Features": 0,
                          "Status": 1,
                          "Region": null,
                          "City": null,
                          "Servers": [
                            {
                              "ID": "l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA==",
                              "EntryIP": "95.215.61.163",
                              "ExitIP": "95.215.61.164",
                              "Domain": "es-04.protonvpn.com",
                              "Status": 1
                            }
                          ],
                          "Load": 0,
                          "Location": {
                            "Lat": 39.4667,
                            "Long": -0.3667
                          },
                          "Score": 1
                        }
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /vpn/profiles:
    get:
      tags:
        - VPN Profiles
      summary: Get VPN profiles
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                        "Code": 1000,
                        "Profiles": [
                            {
                                "Name": "hello",
                                "Color": "#f66",
                                "Features": 1, // bitmap: 1 is secure core, 2 is tor, 4 is P2P, 8 is XOR, 16 is IPV6
                                "LogicalID": "uVpvbvGpIO_az-Y1JNX4whHULAw5qnReYfMWmG4Yj-K1UypazCBTtZ4eecbgQcgTXs_KWXsRhOyAHTQv1_qTeA==",
                                "Protocol": 1,
                                "Country": "FE",
                                "Type": 0, // 0 is specified server, 1 is fastest, 2 is random server
                                "ID": "ARy95iNxhniEgYJrRrGvagmzRdnmvxCmjArhv3oZhlevziltNm07euTTWeyGQF49RxFpMqWE_ZGDXEvGV2CEkA=="
                            }
                        ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    post:
      tags:
        - VPN Profiles
      summary: Create VPN profile
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "LogicalID": "uVpvbvGpIO_az-Y1JNX4whHULAw5qnReYfMWmG4Yj-K1UypazCBTtZ4eecbgQcgTXs_KWXsRhOyAHTQv1_qTeA==",
                      "Color": "#f66",
                      "Name": "hello",
                      "Country": "FE",
                      "Type": 0,
                      "Features": 1, // bitmap: 1 is secure core, 2 is tor, 4 is P2P, 8 is XOR, 16 is IPV6
                      "Protocol": 1 // 1 is TCP, 2 is UDP, 3 is no preference
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Profile": {
                        "Name": "hello",
                        "Color": "#f66",
                        "Type": 0,
                        "Features": 1,
                        "LogicalID": "uVpvbvGpIO_az-Y1JNX4whHULAw5qnReYfMWmG4Yj-K1UypazCBTtZ4eecbgQcgTXs_KWXsRhOyAHTQv1_qTeA==",
                        "Protocol": 1,
                        "Country": "FE",
                        "ID": "S6oNe_lxq3GNMIMFQdAwOOk5wNYpZwGjBHFr5mTNp9aoMUaCRNsefrQt35mIg55iefE3fTq8BnyM4znqoVrAyA=="
                      }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
        '400':
          $ref: '#/components/responses/VPNInvalidLogicalId'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /vpn/profiles/colors:
    get:
      tags:
        - VPN Profiles
      summary: Get VPN profile colors
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Colors": [
                        "#7272a7",
                        "cf55858"
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  '/vpn/profiles/{encryptedID}':
    put:
      tags:
        - VPN Profiles
      summary: Update VPN profile
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
        - name: encryptedID
          in: path
          schema:
            type: string
            example: S6oNe_lxq3GNMIMrAyA==
          required: true
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "LogicalID": "uVpvbvGpIO_az-Y1JNX4whHULAw5qnReYfMWmG4Yj-K1UypazCBTtZ4eecbgQcgTXs_KWXsRhOyAHTQv1_qTeA==",
                      "Color": "#f66",
                      "Name": "hello",
                      "Type": 0,
                      "Country": "FE",
                      "Features": 1, // bitmap: 1 is secure core, 2 is tor, 4 is P2P, 8 is XOR, 16 is IPV6
                      "Protocol": 1
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Profile": {
                        "Name": "hello",
                        "Color": "#f66",
                        "Features": 1,
                        "Type": 0,
                        "LogicalID": "uVpvbvGpIO_az-Y1JNX4whHULAw5qnReYfMWmG4Yj-K1UypazCBTtZ4eecbgQcgTXs_KWXsRhOyAHTQv1_qTeA==",
                        "Protocol": 1,
                        "Country": "FE",
                        "ID": "S6oNe_lxq3GNMIMFQdAwOOk5wNYpZwGjBHFr5mTNp9aoMUaCRNsefrQt35mIg55iefE3fTq8BnyM4znqoVrAyA=="
                      }
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
        '400':
          $ref: '#/components/responses/VPNInvalidLogicalId'
      security:
        - pm_authentication: []
    delete:
      tags:
        - VPN Profiles
      summary: Delete VPN profile
      parameters:
        - $ref: '#/components/parameters/header_api_version_3'
        - name: encryptedID
          in: path
          schema:
            type: string
            example: S6oNe_lxq3VrAyA==
          required: true
      responses:
        '200':
          $ref: '#/components/responses/SimpleOK'
        '400':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 86063,
                      "Error": "Invalid profile ID"
                    }
          description: '[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_Accept_json'
  /vpn/servers:
    get:
      tags:
        - VPN
      summary: Get array of VPN server information
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Servers": [
                        {
                          "ID": "-Bpgivr5H2qGDRiUQ4-7gm5YLf215MEgZCdzOtLW5psxgB8oNc8OnoFRykab4Z23EGEW1ka3GtQPF9xwx9-VUA==",
                          "EntryIP": "185.159.156.6",
                          "Domain": "se-04.protonvpn.com",
                          "ExitIP": "185.159.156.6",
                          "Status": 1
                        },
                        {
                          "ID": "pIJGEYyNFsPEb61otAc47_X8eoSeAfMSokny6dmg3jg2JrcdohiRuWSN2i1rgnkEnZmolVx4Np96IcwxJh1WNw==",
                          "EntryIP": "185.159.156.8",
                          "Domain": "se-jp-01b.protonvpn.com",
                          "ExitIP": "185.161.200.13",
                          "Status": 1
                        }
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /vpn/servers/load:
    post:
      tags:
        - VPN
      summary: Update server load
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                    "Secret": "82cc921c6a5c6707e1d6e6862ba3201a3870f13acff842549e0cb27ba6902d93",
                    "Bytes": 30440
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |
                    {
                      "Code": 1000,
                      "Server": {
                        "ID": "l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA==",
                        "Bytes": 30440,
                        "ServicesDown": 0,
                        "LoadUpdateTime": 1510953284,
                        "EntryIP": "95.215.61.163",
                        "ExitIP": "95.215.61.164",
                        "Domain": "es-04.protonvpn.com",
                        "MaxSpeed": 26214400,
                        "Status": 1,
                        "Load": 32,
                        "Enabled": 1
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /vpn/servers/status:
    post:
      tags:
        - VPN
      summary: Update server status
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              type: object
            examples:
              example:
                value: |-
                  {
                      "Secret": "82cc921c6a5c6707e1d6e6862ba3201a3870f13acff842549e0cb27ba6902d93",
                      "Status": 0, //0 for down event, 1 for up event
                      "Services": 4 //services affected by this update
                  }
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |
                    {
                      "Code": 1000,
                      "Server": {
                        "ID": "l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA==",
                        "Bytes": 30440,
                        "ServicesDown": 4,
                        "LoadUpdateTime": 1510953284,
                        "EntryIP": "95.215.61.163",
                        "ExitIP": "95.215.61.164",
                        "Domain": "es-04.protonvpn.com",
                        "MaxSpeed": 26214400,
                        "Status": 0,
                        "Load": 32,
                        "Enabled": 1
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    parameters:
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_3'
      - $ref: '#/components/parameters/header_Accept_json'
  /vpn/sessioncount:
    get:
      tags:
        - VPN
      summary: Get VPN active session count
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "SessionCount": 3
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
  /vpn/sessions:
    get:
      tags:
        - VPN
      summary: Get VPN active session information
      responses:
        '200':
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "Code": 1000,
                      "Sessions": [
                        {
                          "SessionID": "9A35C20A09AC0833157B320C408CD678",
                          "ExitIP": "185.159.156.6",
                          "Protocol": "openvpn"
                        },
                        {
                          "SessionID": "81D60BA43DE2580EE855BD0C921C0C15",
                          "ExitIP": "185.123.156.6",
                          "Protocol": "ikev2"
                        },
                        {
                          "SessionID": "73A8B3602503E6001810DDEC06E1C957",
                          "ExitIP": "135.159.156.6",
                          "Protocol": "ikev2"
                        }
                      ]
                    }
          description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
      security:
        - pm_authentication: []
    parameters:
      - $ref: '#/components/parameters/header_x-pm-uid'
      - $ref: '#/components/parameters/header_x-pm-appversion'
      - $ref: '#/components/parameters/header_api_version_1'
      - $ref: '#/components/parameters/header_Accept_json'
components:
  securitySchemes:
    pm_authentication:
      type: http
      scheme: bearer
  requestBodies:
    ArrayOfIds:
      content:
        application/json;charset=utf-8:
          schema:
            type: object
          examples:
            example:
              value: |-
                {
                  "IDs": [
                    "KPlISx5MiML3XcSY-tfNw==",
                    "IwuSjbOUIN105YSvVrdig=="
                  ]
                }
    LabelArrayOfIds:
      content:
        application/json;charset=utf-8:
          schema:
            type: object
          examples:
            example:
              value: |-
                {
                  "LabelID": "ALKJLjalfjl==",
                  "IDs": [
                    "LKJLalkfejl==",
                    "ASia83sJaL=="
                  ]
                }
    LoginData1:
      content:
        application/json;charset=utf-8:
          schema:
            type: object
          examples:
            example:
              value: |-
                {
                    "ClientEphemeral" : "<base64_encoded_ephemeral>",
                    "ClientProof" : "<base64_encoded_proof>",
                    "SRPSession": "<hex_encoded_session_id>",
                    "TwoFactorCode": 123456 // Required if enabled
                }
    LoginData2:
      content:
        application/json;charset=utf-8:
          schema:
            type: object
          examples:
            example:
              value: |-
                {
                    "ClientEphemeral": "<base64_encoded_ephemeral>",
                    "ClientProof": "<base64_encoded_proof>",
                    "SRPSession": "<hex_encoded_session_key>",
                    "U2F": {
                            "KeyRegistration" : "<key_registration>",
                            "ChallengeData": "1046-length string",
                                "Version": "U2F_V2"
                    },
                    "TwoFactorCode": 203941 //either this or the U2F object
                }
    SetMIMEType:
      content:
        application/json;charset=utf-8:
          schema:
            type: object
          examples:
            example:
              value: |-
                {
                    "MIMEType": "text/html" // or "text/plain"
                }
    LabelArrayOfContacts:
      content:
        application/json;charset=utf-8:
          schema:
            type: object
          examples:
            example:
              value: |-
                {
                    "LabelID" : "ALKJLjalfjl==",    // Label's type must be Contact
                    "ContactIDs" : [
                        "LKJLalkfejl==",
                        "ASia83sJaL=="
                    ]
                }
    LabelArrayOfContactEmails:
      content:
        application/json;charset=utf-8:
          schema:
            type: object
          examples:
            example:
              value: |-
                {
                    "LabelID" : "ALKJLjalfjl==",    // Label's type must be Contact
                    "ContactEmailIDs" : [
                        "LKJLalkfejl==",
                        "ASia83sJaL=="
                    ]
                }
    VerifyOrValidateCredit:
      content:
        application/json;charset=utf-8:
          schema:
            type: object
          examples:
            example:
              value: |-
                {
                    "Credit": 100, // optional if GiftCode present
                    "Currency": "USD", // optional if GiftCode present
                    "GiftCode" : "ABCDEFHJMNPQRSTV" // optional
                }
    EnablePasswordResets:
      content:
        application/json;charset=utf-8:
          schema:
            type: object
          examples:
            example:
              value: |-
                {
                    "ClientEphemeral": "<base64_encoded_ephemeral>",
                    "ClientProof": "<base64_encoded_proof>",
                    "SRPSession": "<hex_encoded_session_key>",
                    "TwoFactorCode": 203941, // if enabled
                    "Reset" : 1 // 0 for off, 1 for on
                }
  responses:
    MailSettingsOK:
      content:
        application/json:
          examples:
            example:
              value: |-
                {
                    "Code": 1000,
                    "MailSettings": {
                        "DisplayName": "Put Chinese Here",
                        "Signature": "Your signature here",
                        "Theme": "<CSS>",
                        "AutoResponder": { 
                            "StartTime": 0, // seconds relative to the start of the period (unix timestamp for fixed interval)
                            "Endtime" :  0, // seconds relative to the end of the period (unix timestamp for fixed interval)
                            "Repeat": 0, // Mode: 0 => fixed interval, 1 => daily, 2 => weekly, 3 => monthly, 4 => permanent
                            "DaysSelected": [], // For daily mode: the day of the week expressed as an integer between 0 and 6. 0 is Sunday, 1 is Monday, etc.
                            "Subject": "Auto", // The subject prefix: e.g. "Re" for "Re: <original subject>"
                            "Message": "",
                            "IsEnabled: false,
                            "Zone": "Europe/Zurich"
                        },
                        "AutoSaveContacts": 1,
                        "AutoWildcardSearch": 1,
                        "ComposerMode": 1,
                        "MessageButtons": 0,
                        "ShowImages": 0,
                        "ShowMoved": 3,
                        "ViewMode": 0,
                        "ViewLayout": 0,
                        "SwipeLeft": 0,
                        "SwipeRight": 3,
                        "AlsoArchive": 0,
                        "Hotkeys": 1,
                        "PMSignature": 1,
                        "ImageProxy": 0,
                        "TLS": 0,
                        "RightToLeft": 0,
                        "AttachPublicKey": 0,
                        "Sign": 0,
                        "PGPScheme": 16,
                        "PromptPin": 1,
                        "Autocrypt": 1,
                        "NumMessagePerPage": 50,
                        "DraftMIMEType": "text/html",
                        "ReceiveMIMEType": "text/html",
                        "ShowMIMEType": "text/html"
                    }
                }
      description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    UserSettingsOK:
      content:
        application/json:
          examples:
            example:
              value: |-
                {
                  "Code": 1000,
                  "UserSettings": {
                    "PasswordMode": 1,
                    "Email": {
                      "Value": "abc@gmail.com",
                      "Status": 0,
                      "Notify": 1,
                      "Reset": 0
                    },
                    "Phone": {
                      "Value": "+18005555555",
                      "Status": 0,
                      "Notify": 0,
                      "Reset": 0
                    },
                    "News": 244,
                    "Locale": "en_US",
                    "LogAuth": 2,
                    "InvoiceText": "रिवार में हुआ। ज檷\r\nCartoon Law Services\r\n1 DisneyWorld Lane\r\nOrlando, FL, 12345\r\nVAT blahblahlblahblah",
                    "TOTP": 0,
                    "TwoFactor": 0,
                    "U2FKeys": []
                  }
                }
      description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    MessageOperationOK:
      content:
        application/json:
          examples:
            example:
              value: |-
                {
                  "Code": 1001,
                  "Responses": [
                    {
                      "ID": "KPlISx5MiML3XcSY-tfNw==",
                      "Response": {
                        "Code": 1000
                      }
                    },
                    {
                      "ID": "IwuSjbOUIN105YSvVrdig==",
                      "Response": {
                        "Code": 1000
                      }
                    }
                  ]
                }
      description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    InvalidAccessToken:
      content:
        application/json:
          schema:
            type: object
            properties:
              Code:
                type: string
              Error:
                type: string
              Details:
                type: string
          examples:
            example:
              value: |-
                {
                  "Code": "401",
                  "Error": "Invalid access token",
                  "Details": "{}"
                }
      description: '[Unauthorized](https://tools.ietf.org/html/rfc7235#section-3.1)'
    AccessTokenInsufficientScope:
      content:
        application/json:
          schema:
            type: object
            properties:
              Code:
                type: string
              Error:
                type: string
              Details:
                type: string
          examples:
            example:
              value: |-
                {
                  "Code": "403",
                  "Error": "Access token does not have sufficient scope",
                  "Details": "{}"
                }
      description: '[Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3)'
    SimpleOK:
      headers:
        Access:
          schema:
            type: string
            example: application/vnd.protonmail.api+json;apiversion=0
      content:
        application/json:
          examples:
            example:
              value: |-
                {
                  "Code": 1000
                }
      description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    AddressKeyOK:
      content:
        application/json:
          examples:
            example:
              value: |-
                {
                  "Key": {
                    "ID": "G1MbEt3Ep5P_EWz8WbHVAOl_6h==",
                    "Version": 3,
                    "Flags": 3,
                    "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----",
                    "Fingerprint": "c93f767df53b0ca8395cfde90483475164ec6353",
                    "Activation": null,
                    "Primary": 1
                  },
                  "Code": 1000
                }
      description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    TwoFactorActivationOK:
      content:
        application/json:
          examples:
            example:
              value: |-
                {
                    "TwoFactorRecoveryCodes":  [
                    01234567,
                    12345678,
                    ... //16 alphanumeric codes, each 8 characters long
                    23456789
                    ],
                    "ServerProof":<base64_encoded_proof>,
                    "UserSettings": {
                        "PasswordMode": 1,
                        "Email": {
                            "Value": "abc@gmail.com",
                            "Status": 0,
                            "Notify": 1,
                            "Reset": 0
                        },
                        "Phone": {
                            "Value": "+18005555555",
                            "Status": 0,
                            "Notify": 0,
                            "Reset": 0
                        },
                        "News": 244,
                        "Locale": "en_US",
                        "LogAuth": 2,
                        "InvoiceText": "रिवार में हुआ। ज檷\r\nCartoon Law Services\r\n1 DisneyWorld Lane\r\nOrlando, FL, 12345\r\nVAT blahblahlblahblah",
                        "TOTP": 1,
                        "TwoFactor": 1,
                        "U2FKeys": []
                    },
                    "Code": 1000
                }
      description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    TwoFactorDisableOK:
      content:
        application/json:
          examples:
            example:
              value: |-
                {
                    "ServerProof": <base64_encoded_proof>,
                    "Code": 1000,
                    "UserSettings": {
                        "PasswordMode": 1,
                        "Email": {
                            "Value": "abc@gmail.com",
                            "Status": 0,
                            "Notify": 1,
                            "Reset": 0
                        },
                        "Phone": {
                            "Value": "+18005555555",
                            "Status": 0,
                            "Notify": 0,
                            "Reset": 0
                        },
                        "News": 244,
                        "Locale": "en_US",
                        "LogAuth": 2,
                        "InvoiceText": "रिवार में हुआ। ज檷\r\nCartoon Law Services\r\n1 DisneyWorld Lane\r\nOrlando, FL, 12345\r\nVAT blahblahlblahblah",
                        "TOTP": 0,
                        "TwoFactor": 0,
                        "U2FKeys": []
                    }
                }
      description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    VPNSettingsOk:
      content:
        application/json:
          examples:
            example:
              value: |-
                {
                    "Code": 1000,
                    "VPNSettings": {
                        "Name": "jason1",
                        "Password": "123",
                        "GroupID": "jason",
                        "Status": 1, // 0 = no vpn access, 1 = vpn access, 2 = vpn access eligible, 3 = vpn access requested (waitlist)
                        "ExpirationTime": 0, // only relevant for 'trial' plan, timestamp if non-zero
                        "PlanName": "visionary", // other plans include 'free' and 'trial'
                        "MaxConnect": 10,
                        "MaxTier": 2
                    }
                }
      description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    BetaRegistrationOK:
      content:
        application/json:
          examples:
            example:
              value: |-
                {
                    "Code": 1000,
                    "Beta": {
                        "ClientID": "iOSVPN",
                        "Email" : "john@exampl.com", // may be null
                        "CreateTime": 1538416904,
                        "ModifyTime": 1538416904
                    }
                }
      description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    OkWithServerProof:
      content:
        application/json:
          examples:
            example:
              value: |-
                {
                        "Code": 1000,
                        "ServerProof": <base64_encoded_proof>
                    }
      description: '[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)'
    VPNInvalidLogicalId:
      content:
        application/json:
          examples:
            example:
              value: |-
                {
                    "Code": 86064,
                    "Error": "Invalid logical ID" // Could also be "Invalid name",
                                                  // "A profile with this name already exists",
                                                  // "Invalid country", "Invalid features", "Invalid protocol"

                }
      description: '[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)'
  parameters:
    header_x-pm-appversion:
      name: x-pm-appversion
      in: header
      schema:
        type: string
        example: '{app_version} or Other'
    header_Accept_json:
      name: Accept
      in: header
      schema:
        type: string
        example: application/vnd.protonmail.v1+json
    header_x-pm-uid:
      name: x-pm-uid
      in: header
      schema:
        type: string
        example: '{random_user_uid}'
    header_api_version_1:
      name: x-pm-apiversion
      in: header
      schema:
        type: string
        example: '1'
    header_api_version_3:
      name: x-pm-apiversion
      in: header
      schema:
        type: string
        example: '3'
    header_x-eo-uid:
      name: x-eo-uid
      in: header
      schema:
        type: string
        example: '{token_id}'
    header_Accept_any:
      name: Accept
      in: header
      schema:
        type: string
        example: '*/*'
    header_x-pm-uid_optional:
      name: x-pm-uid
      in: header
      schema:
        type: string
        example: '{random_user_uid}'
      required: false
tags:
  - name: Addresses
  - name: Addresses|Setup Address
  - name: Addresses|Address
  - name: VPN Admin
  - name: Attachments
  - name: Authentication
  - name: Betas
  - name: Contacts
  - name: Conversations
  - name: Devices
  - name: Domains
  - name: EO
  - name: Events
  - name: Filters|Create filters
  - name: Filters
  - name: Import
  - name: Incoming Default
  - name: Invitation
  - name: Keys
  - name: Label
  - name: Logs
  - name: Member Keys
  - name: Members
  - name: Messages
  - name: Metrics
  - name: Organizations
  - name: Organizations|Organization Keys
  - name: Organizations|Organization Backup Key
  - name: Payments
  - name: Reports
  - name: Reset
  - name: Setting
  - name: Setting|Signup for U2F
    description: 'Two steps are needed: first creating a challenge, then verifying the challenge resolution.'
  - name: Mail Setting
  - name: VPN Setting
  - name: User
  - name: VPN
  - name: VPN Profiles
